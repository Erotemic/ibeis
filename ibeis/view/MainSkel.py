# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\jon.crall\code\ibeis\ibeis/view\MainSkel.ui'
#
# Created: Fri Mar 21 22:43:13 2014
#      by: PyQt4 UI code generator 4.10.1
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_mainSkel(object):
    def setupUi(self, mainSkel):
        mainSkel.setObjectName(_fromUtf8("mainSkel"))
        mainSkel.resize(1013, 672)
        mainSkel.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtGui.QWidget(mainSkel)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.splitter = QtGui.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName(_fromUtf8("splitter"))
        self.tablesTabWidget = QtGui.QTabWidget(self.splitter)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.tablesTabWidget.sizePolicy().hasHeightForWidth())
        self.tablesTabWidget.setSizePolicy(sizePolicy)
        self.tablesTabWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.tablesTabWidget.setObjectName(_fromUtf8("tablesTabWidget"))
        self.image_view = QtGui.QWidget()
        self.image_view.setMinimumSize(QtCore.QSize(445, 0))
        self.image_view.setObjectName(_fromUtf8("image_view"))
        self.gridLayout_3 = QtGui.QGridLayout(self.image_view)
        self.gridLayout_3.setObjectName(_fromUtf8("gridLayout_3"))
        self.verticalLayout_2 = QtGui.QVBoxLayout()
        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
        self.gids_TBL = QtGui.QTableWidget(self.image_view)
        self.gids_TBL.setDragEnabled(False)
        self.gids_TBL.setObjectName(_fromUtf8("gids_TBL"))
        self.gids_TBL.setColumnCount(0)
        self.gids_TBL.setRowCount(0)
        self.verticalLayout_2.addWidget(self.gids_TBL)
        self.gridLayout_3.addLayout(self.verticalLayout_2, 0, 0, 1, 1)
        self.tablesTabWidget.addTab(self.image_view, _fromUtf8(""))
        self.chip_view = QtGui.QWidget()
        self.chip_view.setObjectName(_fromUtf8("chip_view"))
        self.gridLayout_4 = QtGui.QGridLayout(self.chip_view)
        self.gridLayout_4.setObjectName(_fromUtf8("gridLayout_4"))
        self.verticalLayout_3 = QtGui.QVBoxLayout()
        self.verticalLayout_3.setObjectName(_fromUtf8("verticalLayout_3"))
        self.cids_TBL = QtGui.QTableWidget(self.chip_view)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cids_TBL.sizePolicy().hasHeightForWidth())
        self.cids_TBL.setSizePolicy(sizePolicy)
        self.cids_TBL.setObjectName(_fromUtf8("cids_TBL"))
        self.cids_TBL.setColumnCount(0)
        self.cids_TBL.setRowCount(0)
        self.verticalLayout_3.addWidget(self.cids_TBL)
        self.gridLayout_4.addLayout(self.verticalLayout_3, 0, 0, 1, 1)
        self.tablesTabWidget.addTab(self.chip_view, _fromUtf8(""))
        self.name_view = QtGui.QWidget()
        self.name_view.setObjectName(_fromUtf8("name_view"))
        self.gridLayout = QtGui.QGridLayout(self.name_view)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.nids_TBL = QtGui.QTableWidget(self.name_view)
        self.nids_TBL.setObjectName(_fromUtf8("nids_TBL"))
        self.nids_TBL.setColumnCount(0)
        self.nids_TBL.setRowCount(0)
        self.gridLayout.addWidget(self.nids_TBL, 0, 0, 1, 1)
        self.tablesTabWidget.addTab(self.name_view, _fromUtf8(""))
        self.result_view = QtGui.QWidget()
        self.result_view.setObjectName(_fromUtf8("result_view"))
        self.verticalLayout_5 = QtGui.QVBoxLayout(self.result_view)
        self.verticalLayout_5.setObjectName(_fromUtf8("verticalLayout_5"))
        self.verticalLayout_4 = QtGui.QVBoxLayout()
        self.verticalLayout_4.setObjectName(_fromUtf8("verticalLayout_4"))
        self.res_TBL = QtGui.QTableWidget(self.result_view)
        self.res_TBL.setSelectionMode(QtGui.QAbstractItemView.ExtendedSelection)
        self.res_TBL.setTextElideMode(QtCore.Qt.ElideLeft)
        self.res_TBL.setObjectName(_fromUtf8("res_TBL"))
        self.res_TBL.setColumnCount(0)
        self.res_TBL.setRowCount(0)
        self.verticalLayout_4.addWidget(self.res_TBL)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.tablesTabWidget.addTab(self.result_view, _fromUtf8(""))
        self.outputEdit = QtGui.QTextEdit(self.splitter)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.outputEdit.sizePolicy().hasHeightForWidth())
        self.outputEdit.setSizePolicy(sizePolicy)
        self.outputEdit.setAcceptRichText(False)
        self.outputEdit.setObjectName(_fromUtf8("outputEdit"))
        self.progressBar = QtGui.QProgressBar(self.splitter)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.progressBar.sizePolicy().hasHeightForWidth())
        self.progressBar.setSizePolicy(sizePolicy)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName(_fromUtf8("progressBar"))
        self.verticalLayout.addWidget(self.splitter)
        mainSkel.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(mainSkel)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1013, 21))
        self.menubar.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.menubar.setDefaultUp(False)
        self.menubar.setNativeMenuBar(False)
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName(_fromUtf8("menuFile"))
        self.menuOptions = QtGui.QMenu(self.menubar)
        self.menuOptions.setObjectName(_fromUtf8("menuOptions"))
        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName(_fromUtf8("menuHelp"))
        self.menuActions = QtGui.QMenu(self.menubar)
        self.menuActions.setObjectName(_fromUtf8("menuActions"))
        self.menuBatch = QtGui.QMenu(self.menubar)
        self.menuBatch.setObjectName(_fromUtf8("menuBatch"))
        mainSkel.setMenuBar(self.menubar)
        self.actionOpen_Database = QtGui.QAction(mainSkel)
        self.actionOpen_Database.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionOpen_Database.setObjectName(_fromUtf8("actionOpen_Database"))
        self.actionSave_Database = QtGui.QAction(mainSkel)
        self.actionSave_Database.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionSave_Database.setObjectName(_fromUtf8("actionSave_Database"))
        self.actionImport_Img_file = QtGui.QAction(mainSkel)
        self.actionImport_Img_file.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionImport_Img_file.setObjectName(_fromUtf8("actionImport_Img_file"))
        self.actionOpen_Data_Directory = QtGui.QAction(mainSkel)
        self.actionOpen_Data_Directory.setObjectName(_fromUtf8("actionOpen_Data_Directory"))
        self.actionOpen_Source_Directory = QtGui.QAction(mainSkel)
        self.actionOpen_Source_Directory.setObjectName(_fromUtf8("actionOpen_Source_Directory"))
        self.actionUndockDisplay = QtGui.QAction(mainSkel)
        self.actionUndockDisplay.setObjectName(_fromUtf8("actionUndockDisplay"))
        self.actionTogPlt = QtGui.QAction(mainSkel)
        self.actionTogPlt.setObjectName(_fromUtf8("actionTogPlt"))
        self.actionHelpCMD = QtGui.QAction(mainSkel)
        self.actionHelpCMD.setObjectName(_fromUtf8("actionHelpCMD"))
        self.actionHelpGUI = QtGui.QAction(mainSkel)
        self.actionHelpGUI.setObjectName(_fromUtf8("actionHelpGUI"))
        self.actionAbout = QtGui.QAction(mainSkel)
        self.actionAbout.setEnabled(False)
        self.actionAbout.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionAbout.setObjectName(_fromUtf8("actionAbout"))
        self.actionHelpWorkflow = QtGui.QAction(mainSkel)
        self.actionHelpWorkflow.setObjectName(_fromUtf8("actionHelpWorkflow"))
        self.actionAdd_Chip = QtGui.QAction(mainSkel)
        self.actionAdd_Chip.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionAdd_Chip.setObjectName(_fromUtf8("actionAdd_Chip"))
        self.actionReselect_ROI = QtGui.QAction(mainSkel)
        self.actionReselect_ROI.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionReselect_ROI.setObjectName(_fromUtf8("actionReselect_ROI"))
        self.actionNext = QtGui.QAction(mainSkel)
        self.actionNext.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionNext.setObjectName(_fromUtf8("actionNext"))
        self.actionDelete_Chip = QtGui.QAction(mainSkel)
        self.actionDelete_Chip.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionDelete_Chip.setObjectName(_fromUtf8("actionDelete_Chip"))
        self.actionQuery = QtGui.QAction(mainSkel)
        self.actionQuery.setEnabled(True)
        self.actionQuery.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionQuery.setObjectName(_fromUtf8("actionQuery"))
        self.actionPrev = QtGui.QAction(mainSkel)
        self.actionPrev.setObjectName(_fromUtf8("actionPrev"))
        self.actionWriteLogs = QtGui.QAction(mainSkel)
        self.actionWriteLogs.setEnabled(False)
        self.actionWriteLogs.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionWriteLogs.setObjectName(_fromUtf8("actionWriteLogs"))
        self.actionOpen_Internal_Directory = QtGui.QAction(mainSkel)
        self.actionOpen_Internal_Directory.setObjectName(_fromUtf8("actionOpen_Internal_Directory"))
        self.actionPreferences = QtGui.QAction(mainSkel)
        self.actionPreferences.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionPreferences.setObjectName(_fromUtf8("actionPreferences"))
        self.actionQuit = QtGui.QAction(mainSkel)
        self.actionQuit.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionQuit.setObjectName(_fromUtf8("actionQuit"))
        self.actionConvertImage2Chip = QtGui.QAction(mainSkel)
        self.actionConvertImage2Chip.setEnabled(True)
        self.actionConvertImage2Chip.setObjectName(_fromUtf8("actionConvertImage2Chip"))
        self.actionBatch_Change_Name = QtGui.QAction(mainSkel)
        self.actionBatch_Change_Name.setObjectName(_fromUtf8("actionBatch_Change_Name"))
        self.actionReselect_Ori = QtGui.QAction(mainSkel)
        self.actionReselect_Ori.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionReselect_Ori.setObjectName(_fromUtf8("actionReselect_Ori"))
        self.actionAdd_Metadata_Property = QtGui.QAction(mainSkel)
        self.actionAdd_Metadata_Property.setObjectName(_fromUtf8("actionAdd_Metadata_Property"))
        self.actionAutoassign = QtGui.QAction(mainSkel)
        self.actionAutoassign.setObjectName(_fromUtf8("actionAutoassign"))
        self.actionRankErrorExpt = QtGui.QAction(mainSkel)
        self.actionRankErrorExpt.setObjectName(_fromUtf8("actionRankErrorExpt"))
        self.actionName_Consistency_Experiment = QtGui.QAction(mainSkel)
        self.actionName_Consistency_Experiment.setObjectName(_fromUtf8("actionName_Consistency_Experiment"))
        self.actionIncrease_ROI_Size = QtGui.QAction(mainSkel)
        self.actionIncrease_ROI_Size.setObjectName(_fromUtf8("actionIncrease_ROI_Size"))
        self.actionView_Docs = QtGui.QAction(mainSkel)
        self.actionView_Docs.setEnabled(False)
        self.actionView_Docs.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionView_Docs.setObjectName(_fromUtf8("actionView_Docs"))
        self.actionAutoassign_2 = QtGui.QAction(mainSkel)
        self.actionAutoassign_2.setObjectName(_fromUtf8("actionAutoassign_2"))
        self.actionNew_Database = QtGui.QAction(mainSkel)
        self.actionNew_Database.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionNew_Database.setObjectName(_fromUtf8("actionNew_Database"))
        self.actionImport_Img_dir = QtGui.QAction(mainSkel)
        self.actionImport_Img_dir.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionImport_Img_dir.setObjectName(_fromUtf8("actionImport_Img_dir"))
        self.actionPrecompute_Queries = QtGui.QAction(mainSkel)
        self.actionPrecompute_Queries.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionPrecompute_Queries.setObjectName(_fromUtf8("actionPrecompute_Queries"))
        self.actionPrecomputeChipsFeatures = QtGui.QAction(mainSkel)
        self.actionPrecomputeChipsFeatures.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionPrecomputeChipsFeatures.setObjectName(_fromUtf8("actionPrecomputeChipsFeatures"))
        self.actionView_DBDir = QtGui.QAction(mainSkel)
        self.actionView_DBDir.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionView_DBDir.setObjectName(_fromUtf8("actionView_DBDir"))
        self.actionScale_all_ROIS = QtGui.QAction(mainSkel)
        self.actionScale_all_ROIS.setEnabled(False)
        self.actionScale_all_ROIS.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionScale_all_ROIS.setObjectName(_fromUtf8("actionScale_all_ROIS"))
        self.actionConvert_all_images_into_chips = QtGui.QAction(mainSkel)
        self.actionConvert_all_images_into_chips.setEnabled(False)
        self.actionConvert_all_images_into_chips.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionConvert_all_images_into_chips.setObjectName(_fromUtf8("actionConvert_all_images_into_chips"))
        self.actionNew_Chip_Property = QtGui.QAction(mainSkel)
        self.actionNew_Chip_Property.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionNew_Chip_Property.setObjectName(_fromUtf8("actionNew_Chip_Property"))
        self.actionDelete_computed_directory = QtGui.QAction(mainSkel)
        self.actionDelete_computed_directory.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionDelete_computed_directory.setObjectName(_fromUtf8("actionDelete_computed_directory"))
        self.actionDelete_global_preferences = QtGui.QAction(mainSkel)
        self.actionDelete_global_preferences.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionDelete_global_preferences.setObjectName(_fromUtf8("actionDelete_global_preferences"))
        self.actionView_Computed_Dir = QtGui.QAction(mainSkel)
        self.actionView_Computed_Dir.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionView_Computed_Dir.setObjectName(_fromUtf8("actionView_Computed_Dir"))
        self.actionView_Global_Dir = QtGui.QAction(mainSkel)
        self.actionView_Global_Dir.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionView_Global_Dir.setObjectName(_fromUtf8("actionView_Global_Dir"))
        self.actionLayout_Figures = QtGui.QAction(mainSkel)
        self.actionLayout_Figures.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionLayout_Figures.setObjectName(_fromUtf8("actionLayout_Figures"))
        self.actionDev_Mode_IPython = QtGui.QAction(mainSkel)
        self.actionDev_Mode_IPython.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionDev_Mode_IPython.setObjectName(_fromUtf8("actionDev_Mode_IPython"))
        self.actionDelete_Precomputed_Results = QtGui.QAction(mainSkel)
        self.actionDelete_Precomputed_Results.setObjectName(_fromUtf8("actionDelete_Precomputed_Results"))
        self.actionDeveloper_Reload = QtGui.QAction(mainSkel)
        self.actionDeveloper_Reload.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionDeveloper_Reload.setObjectName(_fromUtf8("actionDeveloper_Reload"))
        self.actionDelete_Image = QtGui.QAction(mainSkel)
        self.actionDelete_Image.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionDelete_Image.setObjectName(_fromUtf8("actionDelete_Image"))
        self.menuFile.addAction(self.actionNew_Database)
        self.menuFile.addAction(self.actionOpen_Database)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_Database)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionImport_Img_file)
        self.menuFile.addAction(self.actionImport_Img_dir)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuOptions.addAction(self.actionLayout_Figures)
        self.menuOptions.addSeparator()
        self.menuOptions.addAction(self.actionPreferences)
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionView_Docs)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionView_DBDir)
        self.menuHelp.addAction(self.actionView_Computed_Dir)
        self.menuHelp.addAction(self.actionView_Global_Dir)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionWriteLogs)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionDelete_Precomputed_Results)
        self.menuHelp.addAction(self.actionDelete_computed_directory)
        self.menuHelp.addAction(self.actionDelete_global_preferences)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionDev_Mode_IPython)
        self.menuHelp.addAction(self.actionDeveloper_Reload)
        self.menuActions.addAction(self.actionAdd_Chip)
        self.menuActions.addAction(self.actionNew_Chip_Property)
        self.menuActions.addSeparator()
        self.menuActions.addAction(self.actionQuery)
        self.menuActions.addSeparator()
        self.menuActions.addAction(self.actionReselect_ROI)
        self.menuActions.addAction(self.actionReselect_Ori)
        self.menuActions.addSeparator()
        self.menuActions.addAction(self.actionNext)
        self.menuActions.addSeparator()
        self.menuActions.addAction(self.actionDelete_Chip)
        self.menuActions.addAction(self.actionDelete_Image)
        self.menuBatch.addAction(self.actionPrecomputeChipsFeatures)
        self.menuBatch.addAction(self.actionPrecompute_Queries)
        self.menuBatch.addSeparator()
        self.menuBatch.addAction(self.actionScale_all_ROIS)
        self.menuBatch.addSeparator()
        self.menuBatch.addAction(self.actionConvert_all_images_into_chips)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuActions.menuAction())
        self.menubar.addAction(self.menuBatch.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(mainSkel)
        self.tablesTabWidget.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(mainSkel)

    def retranslateUi(self, mainSkel):
        mainSkel.setWindowTitle(_translate("mainSkel", "HotSpotter", None))
        self.gids_TBL.setSortingEnabled(True)
        self.tablesTabWidget.setTabText(self.tablesTabWidget.indexOf(self.image_view), _translate("mainSkel", "Image Table", None))
        self.cids_TBL.setSortingEnabled(True)
        self.tablesTabWidget.setTabText(self.tablesTabWidget.indexOf(self.chip_view), _translate("mainSkel", "Chip Table", None))
        self.tablesTabWidget.setTabText(self.tablesTabWidget.indexOf(self.name_view), _translate("mainSkel", "Name Table", None))
        self.res_TBL.setSortingEnabled(True)
        self.tablesTabWidget.setTabText(self.tablesTabWidget.indexOf(self.result_view), _translate("mainSkel", "Query Results Table", None))
        self.menuFile.setTitle(_translate("mainSkel", "File", None))
        self.menuOptions.setTitle(_translate("mainSkel", "Options", None))
        self.menuHelp.setTitle(_translate("mainSkel", "Help", None))
        self.menuActions.setTitle(_translate("mainSkel", "Actions", None))
        self.menuBatch.setTitle(_translate("mainSkel", "Batch", None))
        self.actionOpen_Database.setText(_translate("mainSkel", "Open Database", None))
        self.actionOpen_Database.setToolTip(_translate("mainSkel", "Opens a different database directory. ", None))
        self.actionOpen_Database.setShortcut(_translate("mainSkel", "Ctrl+O", None))
        self.actionSave_Database.setText(_translate("mainSkel", "Save Database", None))
        self.actionSave_Database.setIconText(_translate("mainSkel", "Save Database", None))
        self.actionSave_Database.setToolTip(_translate("mainSkel", "Saves the added images / chip properties / and changed names to the database csv tables.", None))
        self.actionSave_Database.setShortcut(_translate("mainSkel", "Ctrl+S", None))
        self.actionImport_Img_file.setText(_translate("mainSkel", "Import Images (select file(s))", None))
        self.actionImport_Img_file.setShortcut(_translate("mainSkel", "Ctrl+I", None))
        self.actionOpen_Data_Directory.setText(_translate("mainSkel", "View Data Directory", None))
        self.actionOpen_Source_Directory.setText(_translate("mainSkel", "View Source Directory", None))
        self.actionUndockDisplay.setText(_translate("mainSkel", "Undock Display", None))
        self.actionTogPlt.setText(_translate("mainSkel", "Toggle PlotWidget", None))
        self.actionHelpCMD.setText(_translate("mainSkel", "Command Line Help", None))
        self.actionHelpGUI.setText(_translate("mainSkel", "GUI Help", None))
        self.actionAbout.setText(_translate("mainSkel", "About", None))
        self.actionHelpWorkflow.setText(_translate("mainSkel", "Workflow Help", None))
        self.actionAdd_Chip.setText(_translate("mainSkel", "Add Chip", None))
        self.actionAdd_Chip.setToolTip(_translate("mainSkel", "When adding a chip, you select an ROI in Image View. The ROI defines a new chip and it is added (but not saved) to the database.", None))
        self.actionAdd_Chip.setShortcut(_translate("mainSkel", "A", None))
        self.actionReselect_ROI.setText(_translate("mainSkel", "Reselect ROI", None))
        self.actionReselect_ROI.setToolTip(_translate("mainSkel", "Changes the ROI of a chip. Previously associated results and chip data are removed and recomputed. ", None))
        self.actionReselect_ROI.setShortcut(_translate("mainSkel", "R", None))
        self.actionNext.setText(_translate("mainSkel", "Select Next", None))
        self.actionNext.setToolTip(_translate("mainSkel", "Selects the next image or chip in the database. ", None))
        self.actionNext.setShortcut(_translate("mainSkel", "N", None))
        self.actionDelete_Chip.setText(_translate("mainSkel", "Delete Chip", None))
        self.actionDelete_Chip.setToolTip(_translate("mainSkel", "Removes a chip from the database. ", None))
        self.actionDelete_Chip.setShortcut(_translate("mainSkel", "Ctrl+Del", None))
        self.actionQuery.setText(_translate("mainSkel", "Query", None))
        self.actionQuery.setToolTip(_translate("mainSkel", "Issues the currently selected chip as a query. The result table is then populated.", None))
        self.actionQuery.setShortcut(_translate("mainSkel", "Q", None))
        self.actionPrev.setText(_translate("mainSkel", "Prev", None))
        self.actionWriteLogs.setText(_translate("mainSkel", "Write Logs", None))
        self.actionOpen_Internal_Directory.setText(_translate("mainSkel", "View Internal Directory", None))
        self.actionPreferences.setText(_translate("mainSkel", "Edit Preferences", None))
        self.actionPreferences.setToolTip(_translate("mainSkel", "Changes algorithm parameters and program behavior.", None))
        self.actionPreferences.setShortcut(_translate("mainSkel", "Ctrl+P", None))
        self.actionQuit.setText(_translate("mainSkel", "Quit", None))
        self.actionQuit.setToolTip(_translate("mainSkel", "Exits the program", None))
        self.actionConvertImage2Chip.setText(_translate("mainSkel", "Convert All Images to Chips", None))
        self.actionBatch_Change_Name.setText(_translate("mainSkel", "Batch Change Name", None))
        self.actionReselect_Ori.setText(_translate("mainSkel", "Reselect Orientation", None))
        self.actionReselect_Ori.setToolTip(_translate("mainSkel", "Changes the orientation of a chip. Previously associated results and chip data are removed and recomputed. ", None))
        self.actionReselect_Ori.setShortcut(_translate("mainSkel", "O", None))
        self.actionAdd_Metadata_Property.setText(_translate("mainSkel", "Add Chip Property", None))
        self.actionAutoassign.setText(_translate("mainSkel", "Assign Matches Above Threshold", None))
        self.actionRankErrorExpt.setText(_translate("mainSkel", "Rank Error Experiment", None))
        self.actionName_Consistency_Experiment.setText(_translate("mainSkel", "Name Consistency", None))
        self.actionIncrease_ROI_Size.setText(_translate("mainSkel", "Increase all ROI Sizes", None))
        self.actionView_Docs.setText(_translate("mainSkel", "View Documentation", None))
        self.actionAutoassign_2.setText(_translate("mainSkel", "Auto-Assign Matches", None))
        self.actionNew_Database.setText(_translate("mainSkel", "New Database", None))
        self.actionNew_Database.setToolTip(_translate("mainSkel", "Create a new folder to use as a database. ", None))
        self.actionNew_Database.setShortcut(_translate("mainSkel", "Ctrl+N", None))
        self.actionImport_Img_dir.setText(_translate("mainSkel", "Import Images (select directory)", None))
        self.actionPrecompute_Queries.setText(_translate("mainSkel", "Precompute Queries", None))
        self.actionPrecompute_Queries.setToolTip(_translate("mainSkel", "This might take anywhere from a coffee break to an overnight  procedure depending on how many ROIs you\'ve made. It queries each chip and saves the result which allows multiple queries to be rapidly inspected later. ", None))
        self.actionPrecomputeChipsFeatures.setText(_translate("mainSkel", "Precompute Chips/Features", None))
        self.actionPrecomputeChipsFeatures.setToolTip(_translate("mainSkel", "Extracts all chips from images, and computes features. This loads the data into memory and reduces waiting time between selecting chips and images.", None))
        self.actionPrecomputeChipsFeatures.setShortcut(_translate("mainSkel", "Ctrl+Return", None))
        self.actionView_DBDir.setText(_translate("mainSkel", "View Database Dir", None))
        self.actionView_DBDir.setToolTip(_translate("mainSkel", "Opens the database folder in your operating system\'s native file browser (explorer/finder/nautilus)", None))
        self.actionScale_all_ROIS.setText(_translate("mainSkel", "Scale all ROIs", None))
        self.actionScale_all_ROIS.setToolTip(_translate("mainSkel", "Changes the size of every ROI in the database. ", None))
        self.actionConvert_all_images_into_chips.setText(_translate("mainSkel", "Convert all images into chips", None))
        self.actionConvert_all_images_into_chips.setToolTip(_translate("mainSkel", "Every image without a chip has an ROI added to it spanning the entire image.", None))
        self.actionNew_Chip_Property.setText(_translate("mainSkel", "New Chip Property", None))
        self.actionNew_Chip_Property.setToolTip(_translate("mainSkel", "Creates a new column in the chip table for user properties.", None))
        self.actionDelete_computed_directory.setText(_translate("mainSkel", "Delete Computed Directory", None))
        self.actionDelete_computed_directory.setToolTip(_translate("mainSkel", "Deletes all precomputations (not your ROIs or properties though) and lets all data be recomputed and reloaded. This puts your database in a cleaner state. ", None))
        self.actionDelete_global_preferences.setText(_translate("mainSkel", "Delete Global Preferences", None))
        self.actionDelete_global_preferences.setToolTip(_translate("mainSkel", "This deletes global preferences like the previously opened database, your work directory, and defaults algorithm preferences. Use if HotSpotter crashes on loading a database. ", None))
        self.actionView_Computed_Dir.setText(_translate("mainSkel", "View Computed Dir", None))
        self.actionView_Computed_Dir.setToolTip(_translate("mainSkel", "Opens the directory where all precomputed chips, query results, and features are stored. ", None))
        self.actionView_Global_Dir.setText(_translate("mainSkel", "View Global Dir", None))
        self.actionView_Global_Dir.setToolTip(_translate("mainSkel", "This is youre ~/.hotspotter folder, which stores non-database-specific preferences.", None))
        self.actionLayout_Figures.setText(_translate("mainSkel", "Layout Figures", None))
        self.actionLayout_Figures.setToolTip(_translate("mainSkel", "Organizes windows in a grid", None))
        self.actionLayout_Figures.setShortcut(_translate("mainSkel", "Ctrl+L", None))
        self.actionDev_Mode_IPython.setText(_translate("mainSkel", "Developer Mode (IPython)", None))
        self.actionDev_Mode_IPython.setToolTip(_translate("mainSkel", "This allows IPython interaction in the terminal and disables GUI interaction until the \"exit\" command is entered in IPython. ", None))
        self.actionDev_Mode_IPython.setShortcut(_translate("mainSkel", "Ctrl+Alt+Shift+D", None))
        self.actionDelete_Precomputed_Results.setText(_translate("mainSkel", "Delete Cached Query Results", None))
        self.actionDelete_Precomputed_Results.setToolTip(_translate("mainSkel", "Removes all precomputed results. Use if you expect that your results may be corrupted.", None))
        self.actionDeveloper_Reload.setText(_translate("mainSkel", "Developer Reload", None))
        self.actionDeveloper_Reload.setShortcut(_translate("mainSkel", "Ctrl+Shift+R", None))
        self.actionDelete_Image.setText(_translate("mainSkel", "Trash Image", None))
        self.actionDelete_Image.setShortcut(_translate("mainSkel", "Ctrl+Shift+Del", None))


if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    mainSkel = QtGui.QMainWindow()
    ui = Ui_mainSkel()
    ui.setupUi(mainSkel)
    mainSkel.show()
    sys.exit(app.exec_())

