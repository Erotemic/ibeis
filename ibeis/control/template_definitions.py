import utool as ut

controller_header = ut.codeblock(
    '''
    # AUTOGENERATED ON {timestamp}
    from __future__ import absolute_import, division, print_function
    import functools
    import six  # NOQA
    from six.moves import map, range  # NOQA
    from ibeis import constants
    from ibeis.control.IBEISControl import IBEISController
    import utool  # NOQA
    import utool as ut  # NOQA
    print, print_, printDBG, rrr, profile = ut.inject(__name__, '[autogen_ibsfuncs]')

    # Create dectorator to inject these functions into the IBEISController
    register_ibs_aliased_method   = ut.make_class_method_decorator((IBEISController, 'autogen'))
    register_ibs_unaliased_method = ut.make_class_method_decorator((IBEISController, 'autogen'))


    def register_ibs_method(func):
    aliastup = (func, 'autogen_' + ut.get_funcname(func))
    register_ibs_unaliased_method(func)
    register_ibs_aliased_method(aliastup)

    ''')

#
#
#-----------------
# --- CONFIG ---
#-----------------

getter_template_table_config_rowid = ut.codeblock(
    '''
    def get_{child}_config_rowid({self}):
        """
        returns config_rowid of the current configuration
        Config rowids are always ensured

        getter_template_table_config_rowid

        Example:
            >>> import ibeis; ibs = ibeis.opendb('testdb1')

        """
        {child}_cfg_suffix = {self}.cfg.{child}_cfg.get_cfgstr()
        {child}_cfg_rowid = {self}.add_config({child}_cfg_suffix)
        return {child}_cfg_rowid
    '''
)

#
#
#-----------------
# --- IDERS ---
#-----------------


ider_template_all_rowids = ut.codeblock(
    '''
    @ider
    def _get_all_{tbl}_rowids({self}):
        """
        ider_template_all_rowids

        Returns:
            list_ (list): unfiltered {tbl}_rowids
        """
        all_{tbl}_rowids = {self}.{dbself}.get_all_rowids({TABLE})
        return all_{tbl}_rowids
    '''
)


#
#
#-----------------
# --- ADDERS ---
#-----------------


adder_template_dependant_child = ut.codeblock(
    '''
    def add_{parent}_{child}({self}, {parent}_rowid_list, config_rowid=None):
        """
        Adds / ensures / computes a dependant property

        adder_template_dependant_child

        returns config_rowid of the current configuration
        """
        raise NotImplementedError('this code is a stub, you must populate it')
        from ibeis.model.preproc import preproc_{child}
        if config_rowid is None:
            config_rowid = {self}.get_{child}_config_rowid()
        {child}_rowid_list = ibs.get_{parent}_{child}_rowids(
            {parent}_rowid_list, config_rowid=config_rowid, ensure=False)
        dirty_{parent}_rowid_list = utool.get_dirty_items({parent}_rowid_list, {child}_rowid_list)
        if len(dirty_{parent}_rowid_list) > 0:
            if utool.VERBOSE:
                print('[ibs] adding %d / %d {child}' % (len(dirty_{parent}_rowid_list), len({parent}_rowid_list)))

            import functools  # NOQA
            get_rowid_from_superkey = functools.partial(ibs.get_{parent}_{child}_rowids, ensure=False)
            ###
            colnames = {nonprimary_child_colnames}
            {child_other_propname_lists} = preproc_{child}.add_{child}_params_gen(ibs, {parent}_rowid_list)
            params_iter = (({parent}_rowid, config_rowid, {child_other_propnames}) for {parent}_rowid, {child_other_propnames} in
                           zip({parent}_rowid_list, {child_other_propname_lists}))
            ###
            # params_iter = preproc_{child}.add_{child}_params_gen(ibs, dirty_{parent}_rowid_list)
            params_iter = params_list
            {child}_rowid_list = ibs.dbcache.add_cleanly({TABLE}, colnames, params_iter, get_rowid_from_superkey)
        return {child}_rowid_list
    '''
)

adder_template_relationship = ut.codeblock(
    '''
    @adder
    def add_image_relationship(ibs, gid_list, eid_list):
        """
        Adds a relationship between an image and and encounter

        adder_template_relationship
        """
        colnames = ('image_rowid', 'encounter_rowid',)
        params_iter = list(zip(gid_list, eid_list))
        get_rowid_from_superkey = ibs.get_egr_rowid_from_superkey
        superkey_paramx = (0, 1)
        egrid_list = ibs.db.add_cleanly(EG_RELATION_TABLE, colnames, params_iter,
                                        get_rowid_from_superkey, superkey_paramx)
        return egrid_list
    ''')

#
#
#-----------------
# --- GETTERS ---
#-----------------


getter_template_dependant_primary_rowid = ut.codeblock(
    '''
    def get_{parent}_{child}_rowids({self}, {parent}_rowid_list,
                                    config_rowid=None, all_configs=False,
                                    ensure=True, eager=True,
                                    num_params=None):
        """
        get_{parent}_{child}_rowids

        get {child} rowids of {parent} under the current state configuration

        getter_template_dependant_primary_rowid

        Args:
            {parent}_rowid_list (list):

        Returns:
            list: {child}_rowid_list
        """
        if ensure:
            {self}.add_{child}s({parent}_rowid_list)
        if config_rowid is None:
            config_rowid = {self}.get_{child}_config_rowid()
        colnames = ({CHILD}_ROWID,)
        if all_configs:
            config_rowid = {self}.{dbself}.get(
                {TABLE}, colnames, {parent}_rowid_list,
                id_colname={PARENT}_ROWID, eager=eager, num_params=num_params)
        else:
            config_rowid = {self}.get_{child}_config_rowid()
            andwhere_colnames = [{PARENT}_ROWID, CONFIG_ROWID]
            params_iter = (({parent}_rowid, config_rowid,) for {parent}_rowid in {parent}_rowid_list)
            {child}_rowid_list = {self}.{dbself}.get_where2(
                {TABLE}, colnames, params_iter, andwhere_colnames, eager=eager,
                num_params=num_params)
        return {child}_rowid_list
    ''')


line_template_get_dependant_rowid = ut.codeblock(
    '''
    {child}_rowid_list = {self}.get_{parent}_{child}_rowids({parent}_rowid_list, cfg=cfg)
    '''
)

getter_template_rowid_lines_dependant = ut.codeblock(
    '''
    def get_{root}_{col}({self}, {root}_rowid_list, cfg=None):
        """ get {col} data of the {parent} table using the dependant {child} table

        getter_template_dependant_column

        Args:
            {parent}_rowid_list (list):

        Returns:
            list: {col}_list
        """
        {dependant_rowid_lines}
        {col}_list = {self}.get_{leaf}_{col}({leaf}_rowid_list, cfg=cfg)
        return {col}_list
    ''')


getter_template_dependant_column = ut.codeblock(
    '''
    def get_{parent}_{col}({self}, {parent}_rowid_list, config_rowid=None):
        """ get {col} data of the {parent} table using the dependant {child} table

        getter_template_dependant_column

        Args:
            {parent}_rowid_list (list):

        Returns:
            list: {col}_list
        """
        {child}_rowid_list = {self}.get_{parent}_{child}_rowids({parent}_rowid_list)
        {col}_list = {self}.get_{child}_{col}({child}_rowid_list, config_rowid=config_rowid)
        return {col}_list
    ''')


getter_template_native_column = ut.codeblock(
    '''
    def get_{tbl}_{col}({self}, {tbl}_rowid_list, eager=True):
        """gets data from the level 0 column "{col}" in the "{tbl}" table

        getter_template_native_column

        Args:
            {tbl}_rowid_list (list):

        Returns:
            list: {col}_list
        """
        id_iter = {tbl}_rowid_list
        colnames = ({COLNAME},)
        {col}_list = {self}.dbcache.get({TABLE}, colnames, id_iter, id_colname='rowid', eager=eager)
        return {col}_list
    ''')
#id_iter = (({tbl}_rowid,) for {tbl}_rowid in {tbl}_rowid_list)


getter_template_native_rowid_from_superkey = ut.codeblock(
    '''
    def get_{tbl}_rowid_from_superkey({self}, {superkey_args},
                                      eager=False, num_params=None):
        """
        Args:
            superkey lists: {superkey_args}

        Returns:
            {tbl}_rowid_list
        """
        colnames = ({tbl}_rowid),
        # FIXME: col_rowid is not correct
        params_iter = zip({superkey_args})
        andwhere_colnames = [{superkey_args}]
        {tbl}_rowid_list = {self}.{dbself}.get_where2(
            {TABLE}, colnames, params_iter, andwhere_colnames, eager=eager,
            num_params=num_params)
        return {tbl}_rowid_list
    ''')


# eg. get_chip_sizes
getter_template_native_multicolumn = ut.codeblock(
    '''
    def get_{tbl}_{multicol}({self}, {tbl}_rowid_list):
        """
        Returns zipped tuple of information from {multicol} columns

        Args:
            {tbl}_rowid_list (list):

        Returns:
            list: {multicol}_list
        """
        {multicol}_list  = ibs.dbcache.get({TABLE}, ({MULTI_COLNAMES},), {tbl}_rowid_list)
        return {multicol}_list
    ''')


#
#
#-----------------
# --- SETTERS ---
#-----------------

setter_template_native_column = ut.codeblock(
    '''
    def set_{tbl}_{colname}({self}, {tbl}_rowid_list, val_list):
        pass
    ''')

setter_template_native_multicolumn = ut.codeblock(
    '''
    def set_{tbl}_{multicolname}({self}, {tbl}_rowid_list, vals_list):
        pass
    ''')

#
#
#-----------------
# --- DELETERS ---
#-----------------


deleter_template_native_tbl = ut.codeblock(
    '''
    @deleter
    @cache_invalidator({TABLE})
    def delete_annots({self}, {tbl}_rowid_list):
        """ deletes annotations from the database """
        if utool.VERBOSE:
            print('[{self}] deleting %d {tbl} rows' % len({tbl}_rowid_list))
        # Delete dependant properties
        {self}.delete_{tbl}_chips({tbl}_rowid_list)
        {self}.{dbself}.delete_rowids({TABLE}, {tbl}_rowid_list)
        {self}.delete_{tbl}_relations({tbl}_rowid_list)
    '''
)

deleter_template_table_relation = ut.codeblock(
    '''
    @deleter
    def delete_{tbl}_relations(ibs, {tbl}_rowid_list):
        """ Deletes the relationship between an {tbl} row and a label """
        {relation}_rowids_list = ibs.get_{tbl}_{relation}_rowids({tbl}_rowid_list)
        {relation}_rowid_list = utool.flatten({relation}_rowids_list)
        ibs.db.delete_rowids({RELATION_TABLE}, {relation}_rowid_list)
    '''
)

'''
s/ibs/{self}/gc
s/db/{dbself}/gc
'''
