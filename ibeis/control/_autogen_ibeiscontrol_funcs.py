"""
Autogenerated IBEISController functions

TemplateInfo:
    autogen_time = 22:40:19 2014/11/07

ToRegenerate:
    python ibeis/control/templates.py --dump-autogen-controller
"""
from __future__ import absolute_import, division, print_function
import functools  # NOQA
import six  # NOQA
from six.moves import map, range  # NOQA
from ibeis import constants
from ibeis.control.IBEISControl import IBEISController
import utool  # NOQA
import utool as ut  # NOQA
print, print_, printDBG, rrr, profile = ut.inject(__name__, '[autogen_ibsfuncs]')

# Create dectorator to inject these functions into the IBEISController
register_ibs_aliased_method   = ut.make_class_method_decorator((IBEISController, 'autogen'))
register_ibs_unaliased_method = ut.make_class_method_decorator((IBEISController, 'autogen'))


def register_ibs_method(func):
    aliastup = (func, 'autogen_' + ut.get_funcname(func))
    register_ibs_unaliased_method(func)
    register_ibs_aliased_method(aliastup)
    return func

# AUTOGENED CONSTANTS:
ANNOT_ROWID                 = 'annot_rowid'
CHIP_HEIGHT                 = 'chip_height'
CHIP_ROWID                  = 'chip_rowid'
CHIP_URI                    = 'chip_uri'
CHIP_WIDTH                  = 'chip_width'
CONFIG_ROWID                = 'config_rowid'
FEATWEIGHT_FORGROUND_WEIGHT = 'featweight_forground_weight'
FEATWEIGHT_ROWID            = 'featweight_rowid'
FEAT_ROWID                  = 'feature_rowid'

# =========================
# NATIVE.TCFG METHODS
# =========================


@register_ibs_method
#@ider
def get_featweight_config_rowid(ibs, qreq_=None):
    """
    featweight_cfg_rowid = featweight.config_rowid()

    returns config_rowid of the current configuration
    Config rowids are always ensured

    Returns:
        featweight_cfg_rowid

    TemplateInfo:
        Tcfg_rowid_getter
        leaf = featweight

    """
    if qreq_ is not None:
        featweight_cfg_suffix = qreq_.qparams.featweight_cfgstr
        # TODO store config_rowid in qparams
    else:
        featweight_cfg_suffix = ibs.cfg.featweight_cfg.get_cfgstr()
    featweight_cfg_rowid = ibs.add_config(featweight_cfg_suffix)
    return featweight_cfg_rowid


@register_ibs_method
#@ider
def get_chip_config_rowid(ibs, qreq_=None):
    """
    chip_cfg_rowid = chip.config_rowid()

    returns config_rowid of the current configuration
    Config rowids are always ensured

    Returns:
        chip_cfg_rowid

    TemplateInfo:
        Tcfg_rowid_getter
        leaf = chip

    """
    if qreq_ is not None:
        chip_cfg_suffix = qreq_.qparams.chip_cfgstr
        # TODO store config_rowid in qparams
    else:
        chip_cfg_suffix = ibs.cfg.chip_cfg.get_cfgstr()
    chip_cfg_rowid = ibs.add_config(chip_cfg_suffix)
    return chip_cfg_rowid


# =========================
# NATIVE.TDELETER METHODS
# =========================


@register_ibs_method
#@deleter
#@cache_invalidator(constants.FEATURE_WEIGHT_TABLE)
def delete_featweight(ibs, featweight_rowid_list):
    """
    featweight.delete(featweight_rowid_list)

    delete featweight rows

    Args:
        featweight_rowid_list

    TemplateInfo:
        Tdeleter_native_tbl
        tbl = featweight

    Tdeleter_native_tbl
    """
    from ibeis.model.preproc import preproc_featweight
    if utool.VERBOSE:
        print('[ibs] deleting %d featweight rows' % len(featweight_rowid_list))
    # Prepare: Delete externally stored data (if any)
    preproc_featweight.on_delete(ibs, featweight_rowid_list)
    # Finalize: Delete self
    ibs.dbcache.delete_rowids(
        constants.FEATURE_WEIGHT_TABLE, featweight_rowid_list)


@register_ibs_method
#@deleter
#@cache_invalidator(constants.CHIP_TABLE)
def delete_chip(ibs, cid_list):
    """
    chip.delete(cid_list)

    delete chip rows

    Args:
        cid_list

    TemplateInfo:
        Tdeleter_native_tbl
        tbl = chip

    Tdeleter_native_tbl
    """
    from ibeis.model.preproc import preproc_chip
    if utool.VERBOSE:
        print('[ibs] deleting %d chip rows' % len(cid_list))
    # Prepare: Delete externally stored data (if any)
    preproc_chip.on_delete(ibs, cid_list)
    # Finalize: Delete self
    ibs.dbcache.delete_rowids(constants.CHIP_TABLE, cid_list)


# =========================
# NATIVE.TGET_FROM_SUPERKEY METHODS
# =========================


@register_ibs_method
#@getter
def get_featweight_rowid_from_superkey(ibs, feature_rowid_list, config_rowid_list):
    """
    featweight_rowid_list <- featweight[feature_rowid_list, config_rowid_list]

    Args:
        superkey lists: feature_rowid_list, config_rowid_list

    Returns:
        featweight_rowid_list

    TemplateInfo:
        Tgetter_native_rowid_from_superkey
        tbl = featweight
    """
    colnames = (FEATWEIGHT_ROWID),
    # FIXME: col_rowid is not correct
    params_iter = zip(feature_rowid_list, config_rowid_list)
    andwhere_colnames = [feature_rowid_list, config_rowid_list]
    featweight_rowid_list = ibs.dbcache.get_where2(
        constants.FEATURE_WEIGHT_TABLE, colnames, params_iter, andwhere_colnames)
    return featweight_rowid_list


@register_ibs_method
#@getter
def get_cid_from_superkey(ibs, aid_list, config_rowid_list):
    """
    cid_list <- chip[aid_list, config_rowid_list]

    Args:
        superkey lists: aid_list, config_rowid_list

    Returns:
        cid_list

    TemplateInfo:
        Tgetter_native_rowid_from_superkey
        tbl = chip
    """
    colnames = (CHIP_ROWID),
    # FIXME: col_rowid is not correct
    params_iter = zip(aid_list, config_rowid_list)
    andwhere_colnames = [aid_list, config_rowid_list]
    cid_list = ibs.dbcache.get_where2(
        constants.CHIP_TABLE, colnames, params_iter, andwhere_colnames)
    return cid_list


# =========================
# NATIVE.TGETTER_NATIVE METHODS
# =========================


@register_ibs_method
#@getter
def get_featweight_fgweight(ibs, featweight_rowid_list):
    """
    fgweight_list <- featweight.fgweight[featweight_rowid_list]

    gets data from the "native" column "fgweight" in the "featweight" table

    Args:
        featweight_rowid_list (list):

    Returns:
        list: fgweight_list

    TemplateInfo:
        Tgetter_table_column
        col = fgweight
        tbl = featweight
    """
    id_iter = featweight_rowid_list
    colnames = (FEATWEIGHT_FORGROUND_WEIGHT,)
    fgweight_list = ibs.dbcache.get(
        constants.FEATURE_WEIGHT_TABLE, colnames, id_iter, id_colname='rowid')
    return fgweight_list


@register_ibs_method
#@getter
def get_chip_uri(ibs, cid_list):
    """
    uri_list <- chip.uri[cid_list]

    gets data from the "native" column "uri" in the "chip" table

    Args:
        cid_list (list):

    Returns:
        list: uri_list

    TemplateInfo:
        Tgetter_table_column
        col = uri
        tbl = chip
    """
    id_iter = cid_list
    colnames = (CHIP_URI,)
    uri_list = ibs.dbcache.get(
        constants.CHIP_TABLE, colnames, id_iter, id_colname='rowid')
    return uri_list


@register_ibs_method
#@getter
def get_chip_width(ibs, cid_list):
    """
    width_list <- chip.width[cid_list]

    gets data from the "native" column "width" in the "chip" table

    Args:
        cid_list (list):

    Returns:
        list: width_list

    TemplateInfo:
        Tgetter_table_column
        col = width
        tbl = chip
    """
    id_iter = cid_list
    colnames = (CHIP_WIDTH,)
    width_list = ibs.dbcache.get(
        constants.CHIP_TABLE, colnames, id_iter, id_colname='rowid')
    return width_list


@register_ibs_method
#@getter
def get_chip_height(ibs, cid_list):
    """
    height_list <- chip.height[cid_list]

    gets data from the "native" column "height" in the "chip" table

    Args:
        cid_list (list):

    Returns:
        list: height_list

    TemplateInfo:
        Tgetter_table_column
        col = height
        tbl = chip
    """
    id_iter = cid_list
    colnames = (CHIP_HEIGHT,)
    height_list = ibs.dbcache.get(
        constants.CHIP_TABLE, colnames, id_iter, id_colname='rowid')
    return height_list


# =========================
# NATIVE.TIDER_ALL_ROWIDS METHODS
# =========================


@register_ibs_method
#@ider
def _get_all_featweight_rowids(ibs):
    """
    all_featweight_rowids <- featweight.get_all_rowids()

    Returns:
        list_ (list): unfiltered featweight_rowids

    TemplateInfo:
        Tider_all_rowids
        tbl = featweight
    """
    all_featweight_rowids = ibs.dbcache.get_all_rowids(
        constants.FEATURE_WEIGHT_TABLE)
    return all_featweight_rowids


@register_ibs_method
#@ider
def _get_all_cids(ibs):
    """
    all_cids <- chip.get_all_rowids()

    Returns:
        list_ (list): unfiltered cids

    TemplateInfo:
        Tider_all_rowids
        tbl = chip
    """
    all_cids = ibs.dbcache.get_all_rowids(constants.CHIP_TABLE)
    return all_cids


# =========================
# NATIVE.TSETTER_NATIVE METHODS
# =========================


@register_ibs_method
#@setter
def set_featweight_fgweight(ibs, featweight_rowid_list, fgweight_list):
    """
    fgweight_list -> featweight.fgweight[featweight_rowid_list]

    Args:
        featweight_rowid_list
        fgweight_list

    TemplateInfo:
        Tsetter_native_column
        tbl = featweight
        col = fgweight
    """
    id_iter = featweight_rowid_list
    colnames = (FEATWEIGHT_FORGROUND_WEIGHT,)
    ibs.db.set(constants.FEATURE_WEIGHT_TABLE, colnames, fgweight_list, id_iter)


@register_ibs_method
#@setter
def set_chip_uri(ibs, cid_list, uri_list):
    """
    uri_list -> chip.uri[cid_list]

    Args:
        cid_list
        uri_list

    TemplateInfo:
        Tsetter_native_column
        tbl = chip
        col = uri
    """
    id_iter = cid_list
    colnames = (CHIP_URI,)
    ibs.db.set(constants.CHIP_TABLE, colnames, uri_list, id_iter)


@register_ibs_method
#@setter
def set_chip_width(ibs, cid_list, width_list):
    """
    width_list -> chip.width[cid_list]

    Args:
        cid_list
        width_list

    TemplateInfo:
        Tsetter_native_column
        tbl = chip
        col = width
    """
    id_iter = cid_list
    colnames = (CHIP_WIDTH,)
    ibs.db.set(constants.CHIP_TABLE, colnames, width_list, id_iter)


@register_ibs_method
#@setter
def set_chip_height(ibs, cid_list, height_list):
    """
    height_list -> chip.height[cid_list]

    Args:
        cid_list
        height_list

    TemplateInfo:
        Tsetter_native_column
        tbl = chip
        col = height
    """
    id_iter = cid_list
    colnames = (CHIP_HEIGHT,)
    ibs.db.set(constants.CHIP_TABLE, colnames, height_list, id_iter)


# =========================
# PL.TADDER METHODS
# =========================


@register_ibs_method
#@adder
def add_feat_featweights(ibs, fid_list, qreq_=None):
    """
    feat.featweight.add(fid_list)

    CRITICAL FUNCTION MUST EXIST FOR ALL DEPENDANTS
    Adds / ensures / computes a dependant property

    Args:
         fid_list

    Returns:
        returns config_rowid of the current configuration

    TemplateInfo:
        Tadder_pl_dependant
        parent = feat
        leaf = featweight

    """
    from ibeis.model.preproc import preproc_featweight
    # Get requested configuration id
    config_rowid = ibs.get_featweight_config_rowid(qreq_=qreq_)
    # Find leaf rowids that need to be computed
    featweight_rowid_list = ibs.get_feat_featweight_rowids(
        fid_list, qreq_=qreq_, ensure=False)
    # Get corresponding "dirty" parent rowids
    dirty_fid_list = utool.get_dirty_items(fid_list, featweight_rowid_list)
    if len(dirty_fid_list) > 0:
        if utool.VERBOSE:
            print('[ibs] adding %d / %d featweight' %
                  (len(dirty_fid_list), len(fid_list)))

        # Dependant columns do not need true from_superkey getters.
        # We can use the  Tgetter_rl_dependant_rowids instead
        get_rowid_from_superkey = functools.partial(
            ibs.get_feat_featweight_rowids, qreq_=qreq_, ensure=False)
        fgweight_list = preproc_featweight.add_featweight_params_gen(
            ibs, fid_list)
        params_iter = ((fid, config_rowid, fgweight)
                       for fid, fgweight in
                       zip(fid_list, fgweight_list))
        colnames = [
            'feature_rowid', 'config_rowid', 'featweight_forground_weight']
        featweight_rowid_list = ibs.dbcache.add_cleanly(
            constants.FEATURE_WEIGHT_TABLE, colnames, params_iter, get_rowid_from_superkey)
    return featweight_rowid_list


@register_ibs_method
#@adder
def add_annot_chips(ibs, aid_list, qreq_=None):
    """
    annot.chip.add(aid_list)

    CRITICAL FUNCTION MUST EXIST FOR ALL DEPENDANTS
    Adds / ensures / computes a dependant property

    Args:
         aid_list

    Returns:
        returns config_rowid of the current configuration

    TemplateInfo:
        Tadder_pl_dependant
        parent = annot
        leaf = chip

    """
    from ibeis.model.preproc import preproc_chip
    # Get requested configuration id
    config_rowid = ibs.get_chip_config_rowid(qreq_=qreq_)
    # Find leaf rowids that need to be computed
    cid_list = ibs.get_annot_cids(aid_list, qreq_=qreq_, ensure=False)
    # Get corresponding "dirty" parent rowids
    dirty_aid_list = utool.get_dirty_items(aid_list, cid_list)
    if len(dirty_aid_list) > 0:
        if utool.VERBOSE:
            print('[ibs] adding %d / %d chip' %
                  (len(dirty_aid_list), len(aid_list)))

        # Dependant columns do not need true from_superkey getters.
        # We can use the  Tgetter_rl_dependant_rowids instead
        get_rowid_from_superkey = functools.partial(
            ibs.get_annot_cids, qreq_=qreq_, ensure=False)
        chip_uri_list, chip_width_list, chip_height_list = preproc_chip.add_chip_params_gen(
            ibs, aid_list)
        params_iter = ((aid, config_rowid, chip_uri, chip_width, chip_height)
                       for aid, chip_uri, chip_width, chip_height in
                       zip(aid_list, chip_uri_list, chip_width_list, chip_height_list))
        colnames = ['annot_rowid', 'config_rowid',
                    'chip_uri', 'chip_width', 'chip_height']
        cid_list = ibs.dbcache.add_cleanly(
            constants.CHIP_TABLE, colnames, params_iter, get_rowid_from_superkey)
    return cid_list


# =========================
# PL.TGETTER_ROWIDS METHODS
# =========================


@register_ibs_method
#@getter
def get_feat_featweight_rowids(ibs, fid_list, qreq_=None, ensure=False):
    """
    featweight_rowid_list <- feat.featweight.rowids[fid_list]

    get featweight rowids of feat under the current state configuration

    Args:
        fid_list (list):

    Returns:
        list: featweight_rowid_list

    TemplateInfo:
        Tgetter_pl_dependant_rowids
        parent = feat
        leaf = featweight

    """
    if ensure:
        featweight_rowid_list = ibs.add_feat_featweights(fid_list, qreq_=qreq_)
        return featweight_rowid_list
    else:
        colnames = (FEATWEIGHT_ROWID,)
        config_rowid = ibs.get_featweight_config_rowid(qreq_=qreq_)
        andwhere_colnames = (FEAT_ROWID, CONFIG_ROWID,)
        params_iter = ((fid, config_rowid,) for fid in fid_list)
        featweight_rowid_list = ibs.dbcache.get_where2(
            constants.FEATURE_WEIGHT_TABLE, colnames, params_iter, andwhere_colnames)
        return featweight_rowid_list


@register_ibs_method
#@getter
def get_annot_cids(ibs, aid_list, qreq_=None, ensure=False):
    """
    cid_list <- annot.chip.rowids[aid_list]

    get chip rowids of annot under the current state configuration

    Args:
        aid_list (list):

    Returns:
        list: cid_list

    TemplateInfo:
        Tgetter_pl_dependant_rowids
        parent = annot
        leaf = chip

    """
    if ensure:
        cid_list = ibs.add_annot_chips(aid_list, qreq_=qreq_)
        return cid_list
    else:
        colnames = (CHIP_ROWID,)
        config_rowid = ibs.get_chip_config_rowid(qreq_=qreq_)
        andwhere_colnames = (ANNOT_ROWID, CONFIG_ROWID,)
        params_iter = ((aid, config_rowid,) for aid in aid_list)
        cid_list = ibs.dbcache.get_where2(
            constants.CHIP_TABLE, colnames, params_iter, andwhere_colnames)
        return cid_list


# =========================
# RL.TADDER METHODS
# =========================


@register_ibs_method
#@adder
def add_annot_featweights(ibs, aid_list, qreq_=None):
    """
    featweight_rowid_list <- annot.featweight.ensure(aid_list)

    Adds / ensures / computes a dependant property
    returns config_rowid of the current configuration

    CONVINIENCE FUNCTION

    Args:
        aid_list

    TemplateInfo:
        Tadder_rl_dependant
        root = annot
        leaf = featweight

    """
    fid_list = ibs.get_annot_fids(aid_list, qreq_=qreq_, ensure=True)
    featweight_rowid_list = ibs.add_feat_featweights(fid_list, qreq_=qreq_)
    return featweight_rowid_list


# =========================
# RL.TDELETER METHODS
# =========================


@register_ibs_method
#@deleter
#@cache_invalidator(constants.ANNOTATION_TABLE)
def delete_annot_featweight(ibs, aid_list, qreq_=None):
    """
    annot.featweight.delete(aid_list)

    Args:
        aid_list

    TemplateInfo:
        Tdeleter_rl_depenant
        root = annot
        leaf = featweight
    """
    if utool.VERBOSE:
        print('[ibs] deleting %d annots leaf nodes' % len(aid_list))
    # Delete any dependants
    _featweight_rowid_list = ibs.get_annot_featweight_rowids(
        aid_list, qreq_=qreq_, ensure=False)
    featweight_rowid_list = ut.filter_Nones(_featweight_rowid_list)
    ibs.delete_featweight(featweight_rowid_list)


# =========================
# RL.TGETTER METHODS
# =========================


@register_ibs_method
#@getter
def get_annot_featweight_all_rowids(ibs, aid_list):
    """
    featweight_rowid_list <- annot.featweight.all_rowids([aid_list])

    get featweight rowids of annot under the current state configuration

    Args:
        aid_list (list):

    Returns:
        list: featweight_rowid_list

    TemplateInfo:
        Tgetter_rl_dependant_all_rowids
        root = annot
        leaf = featweight
    """
    colnames = (FEAT_ROWID,)
    featweight_rowid_list = ibs.dbcache.get(
        constants.FEATURE_WEIGHT_TABLE, colnames, aid_list,
        id_colname=ANNOT_ROWID)
    return featweight_rowid_list


@register_ibs_method
#@getter
def get_annot_featweight_rowids(ibs, aid_list, qreq_=None, ensure=False):
    """
    featweight_rowid_list = annot.featweight.rowids[aid_list]

    get featweight rowids of annot under the current state configuration

    Args:
        aid_list (list):

    Returns:
        list: featweight_rowid_list

    TemplateInfo:
        Tgetter_rl_dependant_rowids
        root        = annot
        leaf_parent = feat
        leaf        = featweight

    """
    if ensure:
        # Ensuring dependant columns is equivilant to adding cleanly
        return ibs.add_annot_featweights(aid_list, qreq_=qreq_)
    else:
        # Get leaf_parent rowids
        fid_list = ibs.get_annot_fids(
            aid_list, qreq_=qreq_, ensure=False)
        colnames = (FEATWEIGHT_ROWID,)
        config_rowid = ibs.get_featweight_config_rowid(qreq_=qreq_)
        andwhere_colnames = (FEAT_ROWID, CONFIG_ROWID,)
        params_iter = [(fid, config_rowid,) for fid in fid_list]
        featweight_rowid_list = ibs.dbcache.get_where2(
            constants.FEATURE_WEIGHT_TABLE, colnames, params_iter, andwhere_colnames)
        return featweight_rowid_list


# =========================
# RL.TGETTER_DEPENDANT METHODS
# =========================


@register_ibs_method
#@getter
def get_annot_fgweights(ibs, aid_list, qreq_=None, ensure=False):
    """
    featweight_rowid_list <- annot.featweight.rowids[aid_list]

    get fgweight data of the annot table using the dependant featweight table

    Args:
        aid_list (list):

    Returns:
        list: fgweight_list

    TemplateInfo:
        Tgetter_rl_pclines_dependant_column
        root = annot
        col  = fgweight
        leaf = featweight
    """
    # Get leaf rowids
    cid_list = ibs.get_annot_cids(aid_list, qreq_=qreq_, ensure=ensure)
    fid_list = ibs.get_chip_fids(cid_list, qreq_=qreq_, ensure=ensure)
    featweight_rowid_list = ibs.get_feat_featweight_rowids(
        fid_list, qreq_=qreq_, ensure=ensure)
    # Get col values
    fgweight_list = ibs.get_featweight_fgweight(featweight_rowid_list)
    return fgweight_list


@register_ibs_method
#@getter
def get_annot_uris(ibs, aid_list, qreq_=None, ensure=False):
    """
    cid_list <- annot.chip.rowids[aid_list]

    get uri data of the annot table using the dependant chip table

    Args:
        aid_list (list):

    Returns:
        list: uri_list

    TemplateInfo:
        Tgetter_rl_pclines_dependant_column
        root = annot
        col  = uri
        leaf = chip
    """
    # Get leaf rowids
    cid_list = ibs.get_annot_cids(aid_list, qreq_=qreq_, ensure=ensure)
    # Get col values
    uri_list = ibs.get_chip_uri(cid_list)
    return uri_list


@register_ibs_method
#@getter
def get_annot_widths(ibs, aid_list, qreq_=None, ensure=False):
    """
    cid_list <- annot.chip.rowids[aid_list]

    get width data of the annot table using the dependant chip table

    Args:
        aid_list (list):

    Returns:
        list: width_list

    TemplateInfo:
        Tgetter_rl_pclines_dependant_column
        root = annot
        col  = width
        leaf = chip
    """
    # Get leaf rowids
    cid_list = ibs.get_annot_cids(aid_list, qreq_=qreq_, ensure=ensure)
    # Get col values
    width_list = ibs.get_chip_width(cid_list)
    return width_list


@register_ibs_method
#@getter
def get_annot_heights(ibs, aid_list, qreq_=None, ensure=False):
    """
    cid_list <- annot.chip.rowids[aid_list]

    get height data of the annot table using the dependant chip table

    Args:
        aid_list (list):

    Returns:
        list: height_list

    TemplateInfo:
        Tgetter_rl_pclines_dependant_column
        root = annot
        col  = height
        leaf = chip
    """
    # Get leaf rowids
    cid_list = ibs.get_annot_cids(aid_list, qreq_=qreq_, ensure=ensure)
    # Get col values
    height_list = ibs.get_chip_height(cid_list)
    return height_list

if __name__ == '__main__':
    """
    CommandLine:
        python ibeis\control\_autogen_ibeiscontrol_funcs.py
        python ibeis\control\_autogen_ibeiscontrol_funcs.py --test-get_annot_featweight_rowids
    """
    import utool as ut
    testable_list = [
        get_annot_featweight_rowids
    ]
    ut.doctest_funcs(testable_list)
