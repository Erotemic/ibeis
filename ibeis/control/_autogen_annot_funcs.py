"""
Autogenerated IBEISController functions

TemplateInfo:
    autogen_time = 13:16:47 2015/02/20
    autogen_key = annot

ToRegenerate:
    python -m ibeis.control.template_generator --key annot
    python -m ibeis.control.template_generator --key annot --write
"""
from __future__ import absolute_import, division, print_function
import functools  # NOQA
import six  # NOQA
from six.moves import map, range  # NOQA
from ibeis import constants as const
import utool as ut
from ibeis.control.controller_inject import make_ibs_register_decorator
from ibeis.control import accessor_decors
print, print_, printDBG, rrr, profile = ut.inject(__name__, '[autogen_annot]')

# Create dectorator to inject functions in this module into the IBEISController
CLASS_INJECT_KEY, register_ibs_method = make_ibs_register_decorator(__name__)


def testdata_ibs():
    import ibeis
    ibs = ibeis.opendb('testdb1')
    qreq_ = None
    return ibs, qreq_

# AUTOGENED CONSTANTS:
ANNOT_DETECT_CONFIDENCE = 'annot_detect_confidence'
ANNOT_EXEMPLAR_FLAG     = 'annot_exemplar_flag'
ANNOT_NOTE              = 'annot_note'
ANNOT_NUM_VERTS         = 'annot_num_verts'
ANNOT_PARENT_ROWID      = 'annot_parent_rowid'
ANNOT_QUALITY           = 'annot_quality'
ANNOT_ROWID             = 'annot_rowid'
ANNOT_SEMANTIC_UUID     = 'annot_semantic_uuid'
ANNOT_THETA             = 'annot_theta'
ANNOT_VERTS             = 'annot_verts'
ANNOT_YAW               = 'annot_yaw'
CONFIG_ROWID            = 'config_rowid'
FEATWEIGHT_ROWID        = 'featweight_rowid'
IMAGE_ROWID             = 'image_rowid'
NAME_ROWID              = 'name_rowid'
SPECIES_ROWID           = 'species_rowid'


@register_ibs_method
def _get_all_aids(ibs):
    """ all_aids <- annot.get_all_rowids()

    Returns:
        list_ (list): unfiltered aids

    TemplateInfo:
        Tider_all_rowids
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> ibs, qreq_ = testdata_ibs()
        >>> ibs._get_all_aids()
    """
    all_aids = ibs.db.get_all_rowids(const.ANNOTATION_TABLE)
    return all_aids


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE)
def delete_annot(ibs, aid_list, qreq_=None):
    """ annot.delete(aid_list)

    delete annot rows

    Args:
        aid_list

    TemplateInfo:
        Tdeleter_native_tbl
        tbl = annot

    Tdeleter_native_tbl

    Example:
        >>> # DISABLE_DOCTEST
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()[::3]
        >>> ibs.delete_annot(aid_list)
    """
    from ibeis.model.preproc import preproc_annot
    if ut.VERBOSE:
        print('[ibs] deleting %d annot rows' % len(aid_list))
    # Prepare: Delete externally stored data (if any)
    preproc_annot.on_delete(ibs, aid_list, qreq_=qreq_)
    # Finalize: Delete self
    ibs.db.delete_rowids(const.ANNOTATION_TABLE, aid_list)


@register_ibs_method
def get_aid_from_superkey(ibs, annot_uuid_list, eager=True, nInput=None):
    """ aid_list <- annot[annot_uuid_list]

    Args:
        superkey lists: annot_uuid_list

    Returns:
        aid_list

    TemplateInfo:
        Tgetter_native_rowid_from_superkey
        tbl = annot
    """
    colnames = (ANNOT_ROWID,)
    # FIXME: col_rowid is not correct
    params_iter = zip(annot_uuid_list)
    andwhere_colnames = [annot_uuid_list]
    aid_list = ibs.db.get_where2(
        const.ANNOTATION_TABLE, colnames, params_iter, andwhere_colnames, eager=eager, nInput=nInput)
    return aid_list


@register_ibs_method
def get_annot_bboxes(ibs, aid_list, eager=True):
    """
    Returns zipped tuple of information from annot_bbox columns

    Tgetter_native_multicolumn

    Args:
        aid_list (list):

    Returns:
        list: annot_bbox_list

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> ensure = False
        >>> annot_bbox_list = ibs.get_annot_bboxes(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_bbox_list)
    """
    id_iter = aid_list
    colnames = ('annot_xtl', 'annot_ytl', 'annot_width', 'annot_height')
    annot_bbox_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_bbox_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_DETECT_CONFIDENCE)
def get_annot_detect_confidences(ibs, aid_list, eager=True):
    """ annot_detect_confidence_list <- annot.annot_detect_confidence[aid_list]

    gets data from the "native" column "annot_detect_confidence" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_detect_confidence_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_detect_confidence
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_detect_confidence_list = ibs.get_annot_detect_confidences(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_detect_confidence_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_DETECT_CONFIDENCE,)
    annot_detect_confidence_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_detect_confidence_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_EXEMPLAR_FLAG)
def get_annot_exemplar_flags(ibs, aid_list, eager=True):
    """ annot_exemplar_flag_list <- annot.annot_exemplar_flag[aid_list]

    gets data from the "native" column "annot_exemplar_flag" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_exemplar_flag_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_exemplar_flag
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_exemplar_flag_list = ibs.get_annot_exemplar_flags(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_exemplar_flag_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_EXEMPLAR_FLAG,)
    annot_exemplar_flag_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_exemplar_flag_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, IMAGE_ROWID)
def get_annot_image_rowids(ibs, aid_list, eager=True):
    """ image_rowid_list <- annot.image_rowid[aid_list]

    gets data from the "native" column "image_rowid" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: image_rowid_list

    TemplateInfo:
        Tgetter_table_column
        col = image_rowid
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_image_rowid_list = ibs.get_annot_image_rowids(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_image_rowid_list)
    """
    id_iter = aid_list
    colnames = (IMAGE_ROWID,)
    image_rowid_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return image_rowid_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, NAME_ROWID)
def get_annot_name_rowids(ibs, aid_list, eager=True):
    """ name_rowid_list <- annot.name_rowid[aid_list]

    gets data from the "native" column "name_rowid" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: name_rowid_list

    TemplateInfo:
        Tgetter_table_column
        col = name_rowid
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_name_rowid_list = ibs.get_annot_name_rowids(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_name_rowid_list)
    """
    id_iter = aid_list
    colnames = (NAME_ROWID,)
    name_rowid_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return name_rowid_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_NOTE)
def get_annot_notes(ibs, aid_list, eager=True):
    """ annot_note_list <- annot.annot_note[aid_list]

    gets data from the "native" column "annot_note" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_note_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_note
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_note_list = ibs.get_annot_notes(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_note_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_NOTE,)
    annot_note_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_note_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_NUM_VERTS)
def get_annot_num_vert_arrs(ibs, aid_list, eager=True):
    """ annot_num_vert_arr_list <- annot.annot_num_vert_arr[aid_list]

    gets data from the "native" column "annot_num_vert_arr" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_num_vert_arr_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_num_vert_arr
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_num_vert_arr_list = ibs.get_annot_num_vert_arrs(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_num_vert_arr_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_NUM_VERTS,)
    annot_num_vert_arr_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_num_vert_arr_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_PARENT_ROWID)
def get_annot_parent_rowids(ibs, aid_list, eager=True):
    """ annot_parent_rowid_list <- annot.annot_parent_rowid[aid_list]

    gets data from the "native" column "annot_parent_rowid" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_parent_rowid_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_parent_rowid
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_parent_rowid_list = ibs.get_annot_parent_rowids(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_parent_rowid_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_PARENT_ROWID,)
    annot_parent_rowid_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_parent_rowid_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_QUALITY)
def get_annot_qualities(ibs, aid_list, eager=True):
    """ annot_quality_list <- annot.annot_quality[aid_list]

    gets data from the "native" column "annot_quality" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_quality_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_quality
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_quality_list = ibs.get_annot_qualities(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_quality_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_QUALITY,)
    annot_quality_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_quality_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_SEMANTIC_UUID)
def get_annot_semantic_uuids(ibs, aid_list, eager=True):
    """ annot_semantic_uuid_list <- annot.annot_semantic_uuid[aid_list]

    gets data from the "native" column "annot_semantic_uuid" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_semantic_uuid_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_semantic_uuid
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_semantic_uuid_list = ibs.get_annot_semantic_uuids(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_semantic_uuid_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_SEMANTIC_UUID,)
    annot_semantic_uuid_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_semantic_uuid_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, SPECIES_ROWID)
def get_annot_species_rowids(ibs, aid_list, eager=True):
    """ species_rowid_list <- annot.species_rowid[aid_list]

    gets data from the "native" column "species_rowid" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: species_rowid_list

    TemplateInfo:
        Tgetter_table_column
        col = species_rowid
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_species_rowid_list = ibs.get_annot_species_rowids(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_species_rowid_list)
    """
    id_iter = aid_list
    colnames = (SPECIES_ROWID,)
    species_rowid_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return species_rowid_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_THETA)
def get_annot_thetas(ibs, aid_list, eager=True):
    """ annot_theta_list <- annot.annot_theta[aid_list]

    gets data from the "native" column "annot_theta" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_theta_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_theta
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_theta_list = ibs.get_annot_thetas(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_theta_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_THETA,)
    annot_theta_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_theta_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_VERTS)
def get_annot_vert_arrs(ibs, aid_list, eager=True):
    """ annot_vert_arr_list <- annot.annot_vert_arr[aid_list]

    gets data from the "native" column "annot_vert_arr" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_vert_arr_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_vert_arr
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_vert_arr_list = ibs.get_annot_vert_arrs(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_vert_arr_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_VERTS,)
    annot_vert_arr_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_vert_arr_list


@register_ibs_method
def get_annot_visualinfos(ibs, aid_list, eager=True):
    """
    Returns zipped tuple of information from annot_visualinfo columns

    Tgetter_native_multicolumn

    Args:
        aid_list (list):

    Returns:
        list: annot_visualinfo_list

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> ensure = False
        >>> annot_visualinfo_list = ibs.get_annot_visualinfos(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_visualinfo_list)
    """
    id_iter = aid_list
    colnames = ('annot_verts', 'annot_theta', 'annot_view')
    annot_visualinfo_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_visualinfo_list


@register_ibs_method
@accessor_decors.cache_getter(const.ANNOTATION_TABLE, ANNOT_YAW)
def get_annot_yaws(ibs, aid_list, eager=True):
    """ annot_yaw_list <- annot.annot_yaw[aid_list]

    gets data from the "native" column "annot_yaw" in the "annot" table

    Args:
        aid_list (list):

    Returns:
        list: annot_yaw_list

    TemplateInfo:
        Tgetter_table_column
        col = annot_yaw
        tbl = annot

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> aid_list = ibs._get_all_aids()
        >>> eager = True
        >>> annot_yaw_list = ibs.get_annot_yaws(aid_list, eager=eager)
        >>> assert len(aid_list) == len(annot_yaw_list)
    """
    id_iter = aid_list
    colnames = (ANNOT_YAW,)
    annot_yaw_list = ibs.db.get(
        const.ANNOTATION_TABLE, colnames, id_iter, id_colname='rowid', eager=eager)
    return annot_yaw_list


@register_ibs_method
def set_annot_bboxes(ibs, aid_list, annot_bbox_list):
    """ annot_bbox_list -> annot.annot_bbox[aid_list]

    Tsetter_native_multicolumn

    Args:
        aid_list (list):

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> annot_bbox_list = get_annot_bboxes(ibs, aid_list)
    """
    id_iter = aid_list
    colnames = ('annot_xtl', 'annot_ytl', 'annot_width', 'annot_height')
    ibs.db.set(const.ANNOTATION_TABLE, colnames,  annot_bbox_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_DETECT_CONFIDENCE, native_rowids=True)
def set_annot_detect_confidences(ibs, aid_list, annot_detect_confidence_list):
    """ annot_detect_confidence_list -> annot.annot_detect_confidence[aid_list]

    Args:
        aid_list
        annot_detect_confidence_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_detect_confidence
    """
    id_iter = aid_list
    colnames = (ANNOT_DETECT_CONFIDENCE,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames,
               annot_detect_confidence_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_EXEMPLAR_FLAG, native_rowids=True)
def set_annot_exemplar_flags(ibs, aid_list, annot_exemplar_flag_list):
    """ annot_exemplar_flag_list -> annot.annot_exemplar_flag[aid_list]

    Args:
        aid_list
        annot_exemplar_flag_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_exemplar_flag
    """
    id_iter = aid_list
    colnames = (ANNOT_EXEMPLAR_FLAG,)
    ibs.db.set(
        const.ANNOTATION_TABLE, colnames, annot_exemplar_flag_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, IMAGE_ROWID, native_rowids=True)
def set_annot_image_rowids(ibs, aid_list, image_rowid_list):
    """ image_rowid_list -> annot.image_rowid[aid_list]

    Args:
        aid_list
        image_rowid_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = image_rowid
    """
    id_iter = aid_list
    colnames = (IMAGE_ROWID,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames, image_rowid_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, NAME_ROWID, native_rowids=True)
def set_annot_name_rowids(ibs, aid_list, name_rowid_list):
    """ name_rowid_list -> annot.name_rowid[aid_list]

    Args:
        aid_list
        name_rowid_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = name_rowid
    """
    id_iter = aid_list
    colnames = (NAME_ROWID,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames, name_rowid_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_NOTE, native_rowids=True)
def set_annot_notes(ibs, aid_list, annot_note_list):
    """ annot_note_list -> annot.annot_note[aid_list]

    Args:
        aid_list
        annot_note_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_note
    """
    id_iter = aid_list
    colnames = (ANNOT_NOTE,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames, annot_note_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_NUM_VERTS, native_rowids=True)
def set_annot_num_vert_arrs(ibs, aid_list, annot_num_vert_arr_list):
    """ annot_num_vert_arr_list -> annot.annot_num_vert_arr[aid_list]

    Args:
        aid_list
        annot_num_vert_arr_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_num_vert_arr
    """
    id_iter = aid_list
    colnames = (ANNOT_NUM_VERTS,)
    ibs.db.set(
        const.ANNOTATION_TABLE, colnames, annot_num_vert_arr_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_PARENT_ROWID, native_rowids=True)
def set_annot_parent_rowids(ibs, aid_list, annot_parent_rowid_list):
    """ annot_parent_rowid_list -> annot.annot_parent_rowid[aid_list]

    Args:
        aid_list
        annot_parent_rowid_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_parent_rowid
    """
    id_iter = aid_list
    colnames = (ANNOT_PARENT_ROWID,)
    ibs.db.set(
        const.ANNOTATION_TABLE, colnames, annot_parent_rowid_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_QUALITY, native_rowids=True)
def set_annot_qualities(ibs, aid_list, annot_quality_list):
    """ annot_quality_list -> annot.annot_quality[aid_list]

    Args:
        aid_list
        annot_quality_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_quality
    """
    id_iter = aid_list
    colnames = (ANNOT_QUALITY,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames, annot_quality_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_SEMANTIC_UUID, native_rowids=True)
def set_annot_semantic_uuids(ibs, aid_list, annot_semantic_uuid_list):
    """ annot_semantic_uuid_list -> annot.annot_semantic_uuid[aid_list]

    Args:
        aid_list
        annot_semantic_uuid_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_semantic_uuid
    """
    id_iter = aid_list
    colnames = (ANNOT_SEMANTIC_UUID,)
    ibs.db.set(
        const.ANNOTATION_TABLE, colnames, annot_semantic_uuid_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, SPECIES_ROWID, native_rowids=True)
def set_annot_species_rowids(ibs, aid_list, species_rowid_list):
    """ species_rowid_list -> annot.species_rowid[aid_list]

    Args:
        aid_list
        species_rowid_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = species_rowid
    """
    id_iter = aid_list
    colnames = (SPECIES_ROWID,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames, species_rowid_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_THETA, native_rowids=True)
def set_annot_thetas(ibs, aid_list, annot_theta_list):
    """ annot_theta_list -> annot.annot_theta[aid_list]

    Args:
        aid_list
        annot_theta_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_theta
    """
    id_iter = aid_list
    colnames = (ANNOT_THETA,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames, annot_theta_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_VERTS, native_rowids=True)
def set_annot_vert_arrs(ibs, aid_list, annot_vert_arr_list):
    """ annot_vert_arr_list -> annot.annot_vert_arr[aid_list]

    Args:
        aid_list
        annot_vert_arr_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_vert_arr
    """
    id_iter = aid_list
    colnames = (ANNOT_VERTS,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames, annot_vert_arr_list, id_iter)


@register_ibs_method
def set_annot_visualinfos(ibs, aid_list, annot_visualinfo_list):
    """ annot_visualinfo_list -> annot.annot_visualinfo[aid_list]

    Tsetter_native_multicolumn

    Args:
        aid_list (list):

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.control._autogen_annot_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> annot_visualinfo_list = get_annot_visualinfos(ibs, aid_list)
    """
    id_iter = aid_list
    colnames = ('annot_verts', 'annot_theta', 'annot_view')
    ibs.db.set(
        const.ANNOTATION_TABLE, colnames,  annot_visualinfo_list, id_iter)


@register_ibs_method
@accessor_decors.cache_invalidator(const.ANNOTATION_TABLE, ANNOT_YAW, native_rowids=True)
def set_annot_yaws(ibs, aid_list, annot_yaw_list):
    """ annot_yaw_list -> annot.annot_yaw[aid_list]

    Args:
        aid_list
        annot_yaw_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annot
        col = annot_yaw
    """
    id_iter = aid_list
    colnames = (ANNOT_YAW,)
    ibs.db.set(const.ANNOTATION_TABLE, colnames, annot_yaw_list, id_iter)


if __name__ == '__main__':
    """
    CommandLine:
        python -m ibeis.control._autogen_annot_funcs
        python -m ibeis.control._autogen_annot_funcs --allexamples
    """
    import multiprocessing
    multiprocessing.freeze_support()
    import utool as ut
    ut.doctest_funcs()
