"""
Autogenerated IBEISController functions

TemplateInfo:
    autogen_time = 14:42:49 2015/03/11
    autogen_key = annotmatch

ToRegenerate:
    python -m ibeis.templates.template_generator --key annotmatch --Tcfg with_web_api=False with_api_cache=False with_deleters=False --diff
    python -m ibeis.templates.template_generator --key annotmatch --Tcfg with_web_api=False with_api_cache=False with_deleters=False --write
"""
from __future__ import absolute_import, division, print_function
import functools  # NOQA
import six  # NOQA
from six.moves import map, range, zip  # NOQA
from ibeis import constants as const
import utool as ut
from ibeis.control import controller_inject
from ibeis.control import accessor_decors  # NOQA
print, print_, printDBG, rrr, profile = ut.inject(__name__, '[autogen_annotmatch]')

# Create dectorator to inject functions in this module into the IBEISController
CLASS_INJECT_KEY, register_ibs_method = controller_inject.make_ibs_register_decorator(__name__)
register_route = controller_inject.get_ibeis_flask_route()


def testdata_ibs(defaultdb='testdb1'):
    import ibeis
    ibs = ibeis.opendb(defaultdb=defaultdb)
    qreq_ = None
    return ibs, qreq_

# AUTOGENED CONSTANTS:
ANNOTMATCH_CONFIDENCE = 'annotmatch_confidence'
ANNOTMATCH_ROWID      = 'annotmatch_rowid'
ANNOTMATCH_TRUTH      = 'annotmatch_truth'
ANNOT_ROWID1          = 'annot_rowid1'
ANNOT_ROWID2          = 'annot_rowid2'
CONFIG_ROWID          = 'config_rowid'
FEATWEIGHT_ROWID      = 'featweight_rowid'


@register_ibs_method
def _get_all_annotmatch_rowids(ibs):
    """ all_annotmatch_rowids <- annotmatch.get_all_rowids()

    Returns:
        list_ (list): unfiltered annotmatch_rowids

    TemplateInfo:
        Tider_all_rowids
        tbl = annotmatch

    Example:
        >>> # ENABLE_DOCTEST
        >>> from ibeis.control._autogen_annotmatch_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> ibs._get_all_annotmatch_rowids()
    """
    all_annotmatch_rowids = ibs.db.get_all_rowids(const.ANNOTMATCH_TABLE)
    return all_annotmatch_rowids


@register_ibs_method
def add_annotmatch(ibs, aid1_list, aid2_list, annotmatch_truth_list, annotmatch_confidence_list):
    """
    Returns:
        returns annotmatch_rowid_list of added (or already existing annotmatchs)

    TemplateInfo:
        Tadder_native
        tbl = annotmatch
    """
    # WORK IN PROGRESS
    colnames = (
        ANNOT_ROWID1, ANNOT_ROWID2, ANNOTMATCH_TRUTH, ANNOTMATCH_CONFIDENCE,)
    params_iter = (
        (aid1, aid2, annotmatch_truth, annotmatch_confidence,)
        for (aid1, aid2, annotmatch_truth, annotmatch_confidence,) in
        zip(aid1_list, aid2_list, annotmatch_truth_list,
            annotmatch_confidence_list)
    )
    get_rowid_from_superkey = ibs.get_annotmatch_rowid_from_superkey
    annotmatch_rowid_list = ibs.db.add_cleanly(
        const.ANNOTMATCH_TABLE, colnames, params_iter, get_rowid_from_superkey)
    return annotmatch_rowid_list


@register_ibs_method
def get_annotmatch_aid1s(ibs, annotmatch_rowid_list, eager=True, nInput=None):
    """ aid1_list <- annotmatch.aid1[annotmatch_rowid_list]

    gets data from the "native" column "aid1" in the "annotmatch" table

    Args:
        annotmatch_rowid_list (list):

    Returns:
        list: aid1_list

    TemplateInfo:
        Tgetter_table_column
        col = aid1
        tbl = annotmatch

    Example:
        >>> # ENABLE_DOCTEST
        >>> from ibeis.control._autogen_annotmatch_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> annotmatch_rowid_list = ibs._get_all_annotmatch_rowids()
        >>> eager = True
        >>> aid1_list = ibs.get_annotmatch_aid1s(annotmatch_rowid_list, eager=eager)
        >>> assert len(annotmatch_rowid_list) == len(aid1_list)
    """
    id_iter = annotmatch_rowid_list
    colnames = (ANNOT_ROWID1,)
    aid1_list = ibs.db.get(const.ANNOTMATCH_TABLE, colnames,
                           id_iter, id_colname='rowid', eager=eager, nInput=nInput)
    return aid1_list


@register_ibs_method
def get_annotmatch_aid2s(ibs, annotmatch_rowid_list, eager=True, nInput=None):
    """ aid2_list <- annotmatch.aid2[annotmatch_rowid_list]

    gets data from the "native" column "aid2" in the "annotmatch" table

    Args:
        annotmatch_rowid_list (list):

    Returns:
        list: aid2_list

    TemplateInfo:
        Tgetter_table_column
        col = aid2
        tbl = annotmatch

    Example:
        >>> # ENABLE_DOCTEST
        >>> from ibeis.control._autogen_annotmatch_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> annotmatch_rowid_list = ibs._get_all_annotmatch_rowids()
        >>> eager = True
        >>> aid2_list = ibs.get_annotmatch_aid2s(annotmatch_rowid_list, eager=eager)
        >>> assert len(annotmatch_rowid_list) == len(aid2_list)
    """
    id_iter = annotmatch_rowid_list
    colnames = (ANNOT_ROWID2,)
    aid2_list = ibs.db.get(const.ANNOTMATCH_TABLE, colnames,
                           id_iter, id_colname='rowid', eager=eager, nInput=nInput)
    return aid2_list


@register_ibs_method
def get_annotmatch_confidences(ibs, annotmatch_rowid_list, eager=True, nInput=None):
    """ annotmatch_confidence_list <- annotmatch.annotmatch_confidence[annotmatch_rowid_list]

    gets data from the "native" column "annotmatch_confidence" in the "annotmatch" table

    Args:
        annotmatch_rowid_list (list):

    Returns:
        list: annotmatch_confidence_list

    TemplateInfo:
        Tgetter_table_column
        col = annotmatch_confidence
        tbl = annotmatch

    Example:
        >>> # ENABLE_DOCTEST
        >>> from ibeis.control._autogen_annotmatch_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> annotmatch_rowid_list = ibs._get_all_annotmatch_rowids()
        >>> eager = True
        >>> annotmatch_confidence_list = ibs.get_annotmatch_confidences(annotmatch_rowid_list, eager=eager)
        >>> assert len(annotmatch_rowid_list) == len(annotmatch_confidence_list)
    """
    id_iter = annotmatch_rowid_list
    colnames = (ANNOTMATCH_CONFIDENCE,)
    annotmatch_confidence_list = ibs.db.get(
        const.ANNOTMATCH_TABLE, colnames, id_iter, id_colname='rowid', eager=eager, nInput=nInput)
    return annotmatch_confidence_list


@register_ibs_method
def get_annotmatch_rowid_from_superkey(ibs, aid1_list, aid2_list, eager=True, nInput=None):
    """ annotmatch_rowid_list <- annotmatch[aid1_list, aid2_list]

    Args:
        superkey lists: aid1_list, aid2_list

    Returns:
        annotmatch_rowid_list

    TemplateInfo:
        Tgetter_native_rowid_from_superkey
        tbl = annotmatch
    """
    colnames = (ANNOTMATCH_ROWID,)
    # FIXME: col_rowid is not correct
    params_iter = zip(aid1_list, aid2_list)
    andwhere_colnames = [aid1_list, aid2_list]
    annotmatch_rowid_list = ibs.db.get_where2(
        const.ANNOTMATCH_TABLE, colnames, params_iter, andwhere_colnames, eager=eager, nInput=nInput)
    return annotmatch_rowid_list


@register_ibs_method
def get_annotmatch_truths(ibs, annotmatch_rowid_list, eager=True, nInput=None):
    """ annotmatch_truth_list <- annotmatch.annotmatch_truth[annotmatch_rowid_list]

    gets data from the "native" column "annotmatch_truth" in the "annotmatch" table

    Args:
        annotmatch_rowid_list (list):

    Returns:
        list: annotmatch_truth_list

    TemplateInfo:
        Tgetter_table_column
        col = annotmatch_truth
        tbl = annotmatch

    Example:
        >>> # ENABLE_DOCTEST
        >>> from ibeis.control._autogen_annotmatch_funcs import *  # NOQA
        >>> ibs, qreq_ = testdata_ibs()
        >>> annotmatch_rowid_list = ibs._get_all_annotmatch_rowids()
        >>> eager = True
        >>> annotmatch_truth_list = ibs.get_annotmatch_truths(annotmatch_rowid_list, eager=eager)
        >>> assert len(annotmatch_rowid_list) == len(annotmatch_truth_list)
    """
    id_iter = annotmatch_rowid_list
    colnames = (ANNOTMATCH_TRUTH,)
    annotmatch_truth_list = ibs.db.get(
        const.ANNOTMATCH_TABLE, colnames, id_iter, id_colname='rowid', eager=eager, nInput=nInput)
    return annotmatch_truth_list


@register_ibs_method
def set_annotmatch_confidences(ibs, annotmatch_rowid_list, annotmatch_confidence_list, duplicate_behavior='error'):
    """ annotmatch_confidence_list -> annotmatch.annotmatch_confidence[annotmatch_rowid_list]

    Args:
        annotmatch_rowid_list
        annotmatch_confidence_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annotmatch
        col = annotmatch_confidence
    """
    id_iter = annotmatch_rowid_list
    colnames = (ANNOTMATCH_CONFIDENCE,)
    ibs.db.set(const.ANNOTMATCH_TABLE, colnames, annotmatch_confidence_list,
               id_iter, duplicate_behavior=duplicate_behavior)


@register_ibs_method
def set_annotmatch_truths(ibs, annotmatch_rowid_list, annotmatch_truth_list, duplicate_behavior='error'):
    """ annotmatch_truth_list -> annotmatch.annotmatch_truth[annotmatch_rowid_list]

    Args:
        annotmatch_rowid_list
        annotmatch_truth_list

    TemplateInfo:
        Tsetter_native_column
        tbl = annotmatch
        col = annotmatch_truth
    """
    id_iter = annotmatch_rowid_list
    colnames = (ANNOTMATCH_TRUTH,)
    ibs.db.set(const.ANNOTMATCH_TABLE, colnames, annotmatch_truth_list,
               id_iter, duplicate_behavior=duplicate_behavior)


if __name__ == '__main__':
    """
    CommandLine:
        python -m ibeis.control._autogen_annotmatch_funcs
        python -m ibeis.control._autogen_annotmatch_funcs --allexamples
    """
    import multiprocessing
    multiprocessing.freeze_support()
    import utool as ut
    ut.doctest_funcs()
