// Generated by CoffeeScript 1.8.0
(function() {
  var BBoxSelector;

  BBoxSelector = (function() {
    function BBoxSelector(image_frame, options, default_color) {
      if (options == null) {
        options = {};
      }
      options.input_method || (options.input_method = "text");
      this.image_frame = image_frame;
      this.border_width = options.border_width || 2;
      this.selector = $('<div class="bbox_selector"></div>');
      this.selector.css({
        "border": this.border_width + "px dotted " + default_color,
        "position": "absolute"
      });
      this.image_frame.append(this.selector);
      this.selector.css({
        "border-width": this.border_width
      });
      this.selector.hide();
      this.create_label_box(options);
    }

    BBoxSelector.prototype.create_label_box = function(options) {
      var label, _i, _len, _ref;
      options.labels || (options.labels = ["object"]);
      this.label_box = $('<div class="label_box"></div>');
      this.label_box.css({
        "position": "absolute"
      });
      this.image_frame.append(this.label_box);
      switch (options.input_method) {
        case 'select':
          if (typeof options.labels === "string") {
            options.labels = [options.labels];
          }
          this.label_input = $('<select class="label_input" name="label"></select>');
          this.label_box.append(this.label_input);
          this.label_input.append($('<option value>choose an item</option>'));
          _ref = options.labels;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            label = _ref[_i];
            this.label_input.append('<option value="' + label + '">' + label + '</option>');
          }
          this.label_input.change(function(e) {
            return this.blur();
          });
          break;
        case 'text':
          if (typeof options.labels === "string") {
            options.labels = [options.labels];
          }
          this.label_input = $('<input class="label_input" name="label" ' + 'type="text" value>');
          this.label_box.append(this.label_input);
          this.label_input.autocomplete({
            source: options.labels || [''],
            autoFocus: true
          });
          break;
        case 'fixed':
          if ($.isArray(options.labels)) {
            options.labels = options.labels[0];
          }
          this.label_input = $('<input class="label_input" name="label" type="text">');
          this.label_box.append(this.label_input);
          this.label_input.val(options.labels);
          break;
        default:
          throw 'Invalid label_input parameter: ' + options.input_method;
      }
      return this.label_box.hide();
    };

    BBoxSelector.prototype.crop = function(pageX, pageY) {
      var point;
      return point = {
        x: Math.min(Math.max(Math.round(pageX - this.image_frame.offset().left), 0), Math.round(this.image_frame.width() - 1)),
        y: Math.min(Math.max(Math.round(pageY - this.image_frame.offset().top), 0), Math.round(this.image_frame.height() - 1))
      };
    };

    BBoxSelector.prototype.start = function(pageX, pageY) {
      this.pointer = this.crop(pageX, pageY);
      this.offset = this.pointer;
      this.refresh();
      this.selector.show();
      $('body').css('cursor', 'crosshair');
      return document.onselectstart = function() {
        return false;
      };
    };

    BBoxSelector.prototype.update_rectangle = function(pageX, pageY) {
      this.pointer = this.crop(pageX, pageY);
      return this.refresh();
    };

    BBoxSelector.prototype.input_label = function(options) {
      $('body').css('cursor', 'default');
      document.onselectstart = function() {
        return true;
      };
      this.label_box.show();
      return this.label_input.focus();
    };

    BBoxSelector.prototype.finish = function(options) {
      var data;
      this.label_box.hide();
      this.selector.hide();
      data = this.rectangle();
      // data.width = Math.max(50, data.width)
      // data.height = Math.max(50, data.height)
      data.label = $.trim(this.label_input.val().toLowerCase());
      data.angle = 0.0;
      data.id = null;
      if (options.input_method !== 'fixed') {
        this.label_input.val('');
      }

      return data;
    };

    BBoxSelector.prototype.rectangle = function() {
      var rect, x1, x2, y1, y2;
      x1 = Math.min(this.offset.x, this.pointer.x);
      y1 = Math.min(this.offset.y, this.pointer.y);
      x2 = Math.max(this.offset.x, this.pointer.x);
      y2 = Math.max(this.offset.y, this.pointer.y);
      return rect = {
        left:   x1,
        top:    y1,
        width:  x2 - x1 + 1,
        height: y2 - y1 + 1
      };
    };

    BBoxSelector.prototype.refresh = function() {
      var rect;
      rect = this.rectangle();
      this.selector.css({
        left: (rect.left - this.border_width) + 'px',
        top: (rect.top - this.border_width) + 'px',
        width: rect.width + 'px',
        height: rect.height + 'px'
      });
      return this.label_box.css({
        left: (rect.left - this.border_width) + 'px',
        top: (rect.top + rect.height + this.border_width) + 'px'
      });
    };

    BBoxSelector.prototype.get_input_element = function() {
      return this.label_input;
    };

    return BBoxSelector;

  })();

  this.BBoxAnnotator = (function() {
    function BBoxAnnotator(options) {
      var annotator, image_element;
      annotator = this;
      this.annotator_element = $(options.id || "#bbox_annotator");
      this.border_width = options.border_width || 2;
      this.show_label = options.show_label || (options.input_method !== "fixed");
      this.image_frame = $('<div class="image_frame"></div>');
      this.annotator_element.append(this.image_frame);
      if(options.default_color === undefined) { options.default_color = "rgb(255, 255, 255)"; }
      this.default_color = options.default_color;
      this.adding = false;
      this.editing = false;
      this.editing_mouse_inside = false;
      image_element = new Image();
      image_element.src = options.url;
      image_element.onload = function() {
        options.width || (options.width = image_element.width);
        options.height || (options.height = image_element.height);
        annotator.annotator_element.css({
          "width": '1200px',
          "height": (options.height + annotator.border_width * 2 - 1) + 'px',
          "margin-left": 'auto',
          "margin-right": 'auto',
        });
        annotator.image_frame.css({
          "background-image": "url('" + image_element.src + "')",
          "width": options.width + "px",
          "height": (options.height + 2) + "px",
          "position": "relative",
          "margin": "0px auto",
          "cursor": "crosshair",
          "border": "#333 solid 1px",
        });
        annotator.selector = new BBoxSelector(annotator.image_frame, options, options.default_color);
        return annotator.initialize_events(annotator.selector, options);
      };
      image_element.onerror = function() {
        return annotator.annotator_element.text("Invalid image URL: " + options.url);
      };
      this.entries = [];
      this.onchange = options.onchange;
    }

    BBoxAnnotator.prototype.initialize_events = function(selector, options) {
      var annotator, status;
      status = 'free';
      this.hit_menuitem = false;
      annotator = this;
      this.annotator_element.dblclick(function(e) {
        if (e.which === 1) {
          selector.start(e.pageX, e.pageY);
          status = 'hold';
          annotator.adding = true;
          annotator.editing = false;
          annotator.hit_menuitem = false;
          $(".annotated_bounding_box").trigger('mouseenter');
        }
      });
      // this.annotator_element.on('contextmenu', function(e) {
      //   e.preventDefault();
      //   return false;
      // })
      this.annotator_element.mousedown(function(e) {
        $('.annotated_bounding_box').css('opacity', '1.00');
        if (!annotator.hit_menuitem) {
          switch (status) {
            case 'free':
            case 'input':
              if (status === 'input') {
                selector.get_input_element().blur();
              }
              if (e.which === 1) {
                console.log('Left Mouse button pressed (ELEMENT).');
                selector.start(e.pageX, e.pageY);
                status = 'hold';
                annotator.adding = true;
                annotator.editing = false;
              }
              else if (e.which === 3) {
                console.log('Right Mouse button pressed (ELEMENT).');
              }
              break;
            case 'hold':
              selector.update_rectangle(e.pageX, e.pageY);
              selector.input_label(options);
              annotator.adding = false;
              status = 'input';
              if (options.input_method === 'fixed') {
                selector.get_input_element().blur();
              }
          }
        }
        else if (annotator.hit_menuitem)
        {
            switch (status) {
                case 'input':
                    if (e.which === 1) {
                        console.log('Left Mouse button pressed (BOX). ' + status);
                    }
                    else if (e.which === 3) {
                        console.log('Right Mouse button pressed (BOX). ' + status);
                    }
            }
        }
        else if(!annotator.editing)
        {
          // annotator.hit_menuitem = false;
        }
        return true;
      });
      $(window).mousemove(function(e) {

        function lineDistance( p1x, p1y, p2x, p2y ) { return Math.sqrt( (p2x - p1x) * (p2x - p1x) + (p2y - p1y) * (p2y - p1y) ); }

        var active_box;
        active_box = $('.annotated_bounding_box_active');
        console.log('MOUSE: ' + e.pageX + ' ' + e.pageY + ' ' + status + ' ' + annotator.editing_mouse_inside);
        var furthest_dist = 0;
        var furthest_anchor = null;
        active_box.find('.ui-resizable-handle').each(function() {
            position_handle = $(this).offset();
            position_handle_x = position_handle.left;
            position_handle_y = position_handle.top;
            distance = lineDistance(position_handle_x, position_handle_y, e.pageX, e.pageY);
            console.log('    Button: (' + position_handle_x + ', ' + position_handle_y + ')' + ' ' + distance);
            $(this).css('background-color', 'white');
            if(distance > furthest_dist)
            {
                furthest_anchor = this;
                furthest_dist = distance;
            }
        });
        console.log(' ');
        $(furthest_anchor).css('background-color', '#d9534f');

        console.log(status);
        switch (status) {
          case 'hold':
            selector.update_rectangle(e.pageX, e.pageY);
            $('.annotated_bounding_box').css('opacity', '0.25');
            $('.label-text-box').css('opacity', '0.0');
        }
        return true;
      });
      $(window).mouseup(function(e) {
        $('.annotated_bounding_box').css('opacity', '1.00');
        $('.label-text-box').css('opacity', '0.8');
        switch (status) {
          case 'hold':
            selector.update_rectangle(e.pageX, e.pageY);
            selector.input_label(options);
            annotator.adding = false;
            status = 'input';
            if (options.input_method === 'fixed') {
              selector.get_input_element().blur();
            }
        }
        return true;
      });
      selector.get_input_element().blur(function(e) {
        var data;
        switch (status) {
          case 'input':
            data = selector.finish(options);
            if (data.label && data.width >= 10 && data.height >= 10) {
              annotator.add_entry(data);
              annotator.adding = false;
              if (annotator.onchange) {
                annotator.onchange(annotator.entries);
              }
            }
            status = 'free';
        }
        return true;
      });
      $("body").keydown(function(e) {
        if(e.which === 27 || e.which === 75)
        {
          // Esc
          annotator.adding = false;
          annotator.editing = false;
        }

        switch (status) {
          case 'hold':
            if (e.which === 27 || e.which === 75) {
              data = selector.finish(options);
              annotator.adding = false;
              status = 'free';
            }
            break;
          case 'free':
            var active_box, index;
            active_box = $('.annotated_bounding_box_active');
            if(active_box.length > 0)
            {
              index = active_box.prevAll(".annotated_bounding_box").length;
              move = 1
              if(e.shiftKey) {
                move *= 10;
              }
              img_width = parseInt(annotator.image_frame.css('width'));
              img_height = parseInt(annotator.image_frame.css('height'));
              if(e.which === 27 || e.which === 75)
              {
                // Delete
                active_box.detach();
                annotator.entries.splice(index, 1);
                annotator.onchange(annotator.entries);
                annotator.editing = false;
              }
              if(e.which === 66)
              {
                // Send to front
                temp = active_box.detach();
                temp.prependTo(annotator.image_frame);
                entry = annotator.entries.splice(index, 1);
                annotator.entries.unshift(entry[0]);
                annotator.onchange(annotator.entries);
//                 temp.trigger('mouseenter');
              }
              else if(e.which === 37)
              {
                // Left
                proposed = parseInt(active_box.css('left')) - move;
                proposed = Math.max(0, proposed);
                active_box.css('left', proposed + "px");
                entry = annotator.entries[index];
                entry.left = proposed;
                annotator.onchange(annotator.entries);
              }
              else if(e.which === 38)
              {
                // Up
                proposed = parseInt(active_box.css('top')) - move;
                proposed = Math.max(0, proposed);
                active_box.css('top', proposed + "px");
                entry = annotator.entries[index];
                entry.top = proposed;
                annotator.onchange(annotator.entries);
          			e.preventDefault();
                return false;
              }
              else if(e.which === 39)
              {
                // Right
                proposed = parseInt(active_box.css('left')) + move;
                proposed = Math.min(img_width - parseInt(active_box.css('width')) - 1, proposed);
                active_box.css('left', proposed + "px");
                entry = annotator.entries[index];
                entry.left = proposed;
                annotator.onchange(annotator.entries);
              }
              else if(e.which === 40)
              {
                // Down
                proposed = parseInt(active_box.css('top')) + move;
                proposed = Math.min(img_height - parseInt(active_box.css('height')) - 1, proposed);
                active_box.css('top', proposed + "px");
                entry = annotator.entries[index];
                entry.top  = proposed;
                annotator.onchange(annotator.entries);
          			e.preventDefault();
                return false;
              }
            }
        }
      });
      selector.get_input_element().mousedown(function(e) {
        if (e.which === 1) {
        console.log('Left Mouse button pressed (INPUT).');
        }
        else if (e.which === 3) {
        console.log('Right Mouse button pressed (INPUT).');
        }
        return annotator.hit_menuitem = true;
      });
      selector.get_input_element().mousemove(function(e) {
        return annotator.hit_menuitem = true;
      });
      selector.get_input_element().mouseup(function(e) {
        return annotator.hit_menuitem = true;
      });
      return selector.get_input_element().parent().mousedown(function(e) {
        if (e.which === 1) {
        console.log('Left Mouse button pressed (PARENT).');
        }
        else if (e.which === 3) {
        console.log('Right Mouse button pressed (PARENT).');
        }
        return annotator.hit_menuitem = true;
      });
    };

    BBoxAnnotator.prototype.refresh = function() {
      var annotator;
      annotator = this;
      if (annotator.onchange) {
        return annotator.onchange(annotator.entries);
      }
    };

    BBoxAnnotator.prototype.add_entry = function(entry) {
      var annotator, box_element, close_button, rotate_button, text_box;

      function update_style(hover, annotator, e)
      {
        if(hover)
        {
          box_element.css('border-color', '#f0ad4e');
          box_element.css('opacity', '1.0');
          box_element.css('cursor', 'move');
          box_element.css('background-color', 'rgba(0, 0, 0, 0.2)');
          box_element.addClass('annotated_bounding_box_active');
          text_box.css('background-color', '#f0ad4e');
          text_box.css('opacity', '1.0');
          rotate_button.show();
          close_button.show();
          annotator.hit_menuitem = true;
        }
        else if(annotator.adding || ! annotator.editing_mouse_inside)
        {
          box_element.css('border-color', annotator.default_color);
          box_element.css('opacity', '0.8');
          box_element.css('cursor', 'crosshair');
          box_element.css('background-color', 'rgba(0, 0, 0, 0.0)');
          box_element.css('background-color', 'rgba(0, 0, 0, 0.0)');
          box_element.removeClass('annotated_bounding_box_active');
          text_box.css('background-color', annotator.default_color);
          text_box.css('opacity', '0.8');
          annotator.hit_menuitem = false;
          rotate_button.hide();
          close_button.hide();
        }
      }

      function update_dimensions()
      {
        entry['left']   = parseInt(box_element.css('left'));
        entry['top']    = parseInt(box_element.css('top'));
        entry['width']  = parseInt(box_element.css('width'));
        entry['height'] = parseInt(box_element.css('height'));
        annotator.refresh();
      }

      function update_angle(angle)
      {
        function mod(x, n) {
          // Javascript % is not modulus, it is remainder (wtf?)
          return ((x % n) + n) % n;
        }

        entry['angle'] = mod(angle, 2.0 * Math.PI);
        annotator.refresh();
      }
      annotator = this;
      this.entries.push(entry);
      box_element = $('<div class="ui-widget-content annotated_bounding_box"></div>');
      var resize_params = {
          start: function(e, ui) {
            annotator.editing = true;
            $('.label-text-box').css('opacity', '0.0');
          },
          stop: function(e, ui) {
            $('.label-text-box').css('opacity', '0.80');
            annotator.editing = false;
            update_dimensions();
            update_style(false, annotator, e);
          },
          containment: "#bbox_annotator",
          handles: 'n, s, e, w, ne, se, nw, sw',
      };
      var rotate_params = {
          start: function(e, ui) {
            annotator.editing = true;
            $('.label-text-box').css('opacity', '0.0');
          },
          stop: function(e, ui) {
            $('.label-text-box').css('opacity', '0.80');
            annotator.editing = false;
            update_angle(ui.angle.stop);
            update_style(false, annotator, e);
          },
          angle: entry.angle,
      };
      var drag_params = {
          start: function(e, ui) {
            annotator.editing = true;
            $('.label-text-box').css('opacity', '0.0');
          },
          stop: function(e, ui) {
            console.log("STOP");
            $('.label-text-box').css('opacity', '0.80');
            annotator.editing = false;
            update_dimensions();
            update_style(false, annotator, e);
          },
          containment: "#bbox_annotator",
      };
      box_element.rotatable(rotate_params).draggable(drag_params).resizable(resize_params);
      rotate_button = box_element.find('.ui-rotatable-handle');
      box_element.appendTo(this.image_frame).css({
        "border": this.border_width + "px solid " + annotator.default_color,
        "position": "absolute",
        "top": (entry.top - this.border_width) + "px",
        "left": (entry.left - this.border_width) + "px",
        "width": entry.width + "px",
        "height": entry.height + "px",
        "color": "rgb(255, 255, 255)",
        "font-family": "monospace",
        "font-size": "small",
      });
      close_button = $('<div></div>').appendTo(box_element).css({
        "position": "absolute",
        "top": "5px",
        "right": "5px",
        "margin-left": "-10px",
        "width": "20px",
        "height": "0",
        "padding": "16px 0 0 0",
        "overflow": "visible",
        "color": "#fff",
        "background-color": "#030",
        "border": "2px solid #fff",
        "-moz-border-radius": "18px",
        "-webkit-border-radius": "18px",
        "border-radius": "18px",
        "cursor": "pointer",
        "-moz-user-select": "none",
        "-webkit-user-select": "none",
        "user-select": "none",
        "text-align": "center",
      });
      $("<div></div>").appendTo(close_button).html('&#215;').css({
        "display": "block",
        "text-align": "center",
        "width": "16px",
        "position": "absolute",
        "top": "-2px",
        "left": "0",
        "font-size": "16px",
        "line-height": "16px",
        "font-family": '"Helvetica Neue", Consolas, Verdana, Tahoma, Calibri, ' + 'Helvetica, Menlo, "Droid Sans", sans-serif'
      });
      text_box = $('<div class="label-text-box"></div>').appendTo(box_element).css({
        "overflow": "visible",
        "display": "inline-block",
        "background-color": annotator.default_color,
        "opacity": "0.8",
        "color": "#333",
        "padding": "1px 3px",
        // "position": "absolute",
        // "top": "-20px",
      });
      if (this.show_label) {
        if(entry.id !== null)
        {
            text_box.text(entry.label + ', id:' + entry.id);
        }
        else
        {
            text_box.text(entry.label);
        }
      }
      annotator.editing_mouse_inside = false;
      box_element.hover((function(e) {
        console.log('Hover IN: ' + e.pageX + ' ' + e.pageY + ' ' + status + ' ' + annotator.editing_mouse_inside);
        annotator.editing_mouse_inside = true;
        if( ! annotator.adding)
        {
          if( ! annotator.editing)
          {
            update_style(true, annotator, e);
          }
        }
        else
        {
          update_style(false, annotator);
        }
      }), (function(e) {
        console.log('Hover OUT: ' + e.pageX + ' ' + e.pageY + ' ' + status + ' ' + annotator.editing_mouse_inside);
        annotator.editing_mouse_inside = false;
        if( ! annotator.editing)
        {
          update_style(false, annotator, e);
        }
      }));
      close_button.mousedown(function(e) {
        this.editing = false;
        annotator.hit_menuitem = true;
      });
      close_button.click(function(e) {
        var clicked_box, index;
        clicked_box = close_button.parent(".annotated_bounding_box");
        index = clicked_box.prevAll(".annotated_bounding_box").length;
        clicked_box.detach();
        annotator.entries.splice(index, 1);
        return annotator.onchange(annotator.entries);
      });
      rotate_button.hide();
      close_button.hide();
    };

    BBoxAnnotator.prototype.clear_all = function(e) {
      $(".annotated_bounding_box").detach();
      this.entries.splice(0);
      return this.onchange(this.entries);
    };

    return BBoxAnnotator;

  })();

}).call(this);
