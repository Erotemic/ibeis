#!/usr/bin/env python
from os.path import dirname, realpath, join, exists, normpath
import utool
import utool as ut
import sys
import importlib
#import utool as ut
#import utool as ut
from os.path import join  # NOQA


def get_setup_dpath():
    assert exists('setup.py'), 'must be run in ibeis directory'
    assert exists('../ibeis/ibeis'), 'must be run in ibeis directory'
    cwd = normpath(realpath(dirname(__file__)))
    return cwd


def clean_pyinstaller():
    print('[installer] +--- CLEAN_PYINSTALLER ---')
    cwd = get_setup_dpath()
    utool.remove_files_in_dir(cwd, 'IBEISApp.pkg', recursive=False)
    utool.remove_files_in_dir(cwd, 'qt_menu.nib', recursive=False)
    utool.remove_files_in_dir(cwd, 'qt_menu.nib', recursive=False)
    utool.delete(join(cwd, 'dist/ibeis'))
    utool.delete(join(cwd, 'ibeis-win32-setup.exe'))
    utool.delete(join(cwd, 'build'))
    utool.delete(join(cwd, 'pyrf'))
    utool.delete(join(cwd, 'pyhesaff'))
    print('[installer] L___ FINSHED CLEAN_PYINSTALLER ___')


def build_pyinstaller():
    """
    build_pyinstaller creates build/ibeis/* and dist/ibeis/*
    """
    print('[installer] +--- BUILD_PYINSTALLER ---')
    # 1) RUN: PYINSTALLER
    # Run the pyinstaller command (does all the work)
    utool.cmd('pyinstaller', '--runtime-hook rthook_pyqt4.py', '_installers/pyinstaller-ibeis.spec')
    # 2) POST: PROCESSING
    # Perform some post processing steps on the mac

    if sys.platform == 'darwin' and exists('dist/IBEIS.app/Contents/'):
        copy_list = [
            ('ibsicon.icns', 'Resources/icon-windowed.icns'),
            ('Info.plist', 'Info.plist'),
        ]
        srcdir = '_installers'
        dstdir = 'dist/IBEIS.app/Contents/'
        for srcname, dstname in copy_list:
            src = join(srcdir, srcname)
            dst = join(dstdir, dstname)
            utool.copy(src, dst)
        print("RUN: ./_installers/mac_dmg_builder.sh")
        # utool.cmd('_scripts/mac_dmg_builder.sh')
    print('[installer] L___ FINISH BUILD_PYINSTALLER ___')


def ensure_inno_isinstalled():
    """ Ensures that the current machine has INNO installed. returns path to the
    executable """
    assert ut.WIN32, 'Can only build INNO on windows'
    inno_fpath = ut.search_in_dirs('Inno Setup 5\ISCC.exe', ut.get_install_dirs())
    # Make sure INNO is installed
    if inno_fpath is None:
        print('WARNING: cannot find inno_fpath')
        AUTO_FIXIT = utool.WIN32
        print('Inno seems to not be installed. AUTO_FIXIT=%r' % AUTO_FIXIT)
        if AUTO_FIXIT:
            print('Automaticaly trying to downoad and install INNO')
            # Download INNO Installer
            inno_installer_url = 'http://www.jrsoftware.org/download.php/ispack.exe'
            inno_installer_fpath = ut.download_url(inno_installer_url)
            print('Automaticaly trying to install INNO')
            # Install INNO Installer
            ut.cmd(inno_installer_fpath)
        else:
            inno_homepage_url = 'http://www.jrsoftware.org/isdl.php'
            ut.open_url_in_browser(inno_homepage_url)
            raise AssertionError('Cannot find INNO and AUTOFIX it is false')
        # Ensure that it has now been installed
        inno_fpath = ut.search_in_dirs('Inno Setup 5\ISCC.exe', ut.get_install_dirs())
        assert utool.checkpath(inno_fpath, verbose=True, info=True), 'inno installer is still not installed!'
    return inno_fpath


def ensure_inno_script():
    """ writes inno script to distk """
    cwd = get_setup_dpath()
    iss_script_fpath = join(cwd, '_installers', 'win_installer_script.iss')
    # THE ISS USES {} AS SYNTAX. CAREFUL
    #app_publisher = 'Rensselaer Polytechnic Institute'
    #app_name = 'IBEIS'
    iss_script_code = ut.codeblock(
        '''
        ; Script generated by the Inno Setup Script Wizard.
        ; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
        ; http://www.jrsoftware.org/isdl.php

        [Setup]
        ; NOTE: The value of AppId uniquely identifies this application.
        ; Do not use the same AppId value in installers for other applications.
        ; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
        AppId={{47BE3DA2-261D-4672-9849-18BB2EB382FC}
        AppName=IBEIS
        AppVersion=1
        ;AppVerName=IBEIS 1
        AppPublisher=Rensselaer Polytechnic Institute
        AppPublisherURL=www.rpi.edu/~crallj/
        AppSupportURL=www.rpi.edu/~crallj/
        AppUpdatesURL=www.rpi.edu/~crallj/
        DefaultDirName={pf}\IBEIS
        DefaultGroupName=IBEIS
        OutputBaseFilename=ibeis-win32-setup
        SetupIconFile=ibsicon.ico
        Compression=lzma
        SolidCompression=yes

        [Languages]
        Name: "english"; MessagesFile: "compiler:Default.isl"

        [Tasks]
        Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

        [Files]
        Source: "..\dist\ibeis\IBEISApp.exe"; DestDir: "{app}"; Flags: ignoreversion
        Source: "..\dist\ibeis\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
        ; NOTE: Don't use "Flags: ignoreversion" on any shared system files

        [Icons]
        Name: "{group}\ibeis"; Filename: "{app}\IBEISApp.exe"
        Name: "{commondesktop}\ibeis"; Filename: "{app}\IBEISApp.exe"; Tasks: desktopicon

        [Run]
        Filename: "{app}\IBEISApp.exe"; Description: "{cm:LaunchProgram,IBEIS}"; Flags: nowait postinstall skipifsilent
        '''
    )
    ut.write_to(iss_script_fpath, iss_script_code, onlyifdiff=True)
    assert utool.checkpath(iss_script_fpath, verbose=True, info=True), 'cannot find iss_script_fpath'
    return iss_script_fpath


def inno_installer_postprocess():
    """ Move the built installer into a more reasonable directory """
    try:
        cwd = get_setup_dpath()
        installer_src = join(cwd, '_installers', 'Output', 'ibeis-win32-setup.exe')
        installer_dst = join(cwd, 'dist', 'ibeis-win32-setup.exe')
        # Make a timestamped version
        timestamped_fname = 'ibeis-win32-setup-{timestamp}.exe'.format(timestamp=ut.get_timestamp())
        installer_dst2 = join(cwd, 'dist', timestamped_fname)
        ut.move(installer_src, installer_dst)
        ut.copy(installer_dst, installer_dst2)
    except Exception as ex:
        ut.printex(ex, 'error moving setups', iswarning=True)


def build_win32_inno_installer():
    """ win32 self-executable package """
    print('[installer] +--- BUILD_WIN32_INNO_INSTALLER ---')
    assert ut.WIN32, 'Can only build INNO on windows'
    # Get inno executable
    inno_fpath = ensure_inno_isinstalled()
    # Get IBEIS inno script
    iss_script_fpath = ensure_inno_script()
    print('Trying to run ' + ' '.join(['"' + inno_fpath + '"', '"' + iss_script_fpath + '"']))
    try:
        utool.cmd(inno_fpath, iss_script_fpath)
    except Exception as ex:
        ut.printex(ex, 'error running script')
        raise
    # Move the installer into dist and make a timestamped version
    inno_installer_postprocess()
    # Uninstall exe in case we need to cleanup
    #uninstall_ibeis_exe = 'unins000.exe'
    print('[installer] L___ BUILD_WIN32_INNO_INSTALLER ___')


def package_installer():
    """
    system dependent post pyinstaller step
    """
    print('[installer] +--- PACKAGE_INSTALLER ---')
    #build_win32_inno_installer()
    if sys.platform.startswith('win32'):
        build_win32_inno_installer()
    elif sys.platform.startswith('darwin'):
        raise NotImplementedError('TODO: package into dmg')
        pass
    elif sys.platform.startswith('linux'):
        raise NotImplementedError('no linux packager (rpm or deb) supported')
        pass
    print('[installer] L___ FINISH PACKAGE_INSTALLER ___')


def fix_importlib_hook():
    """ IMPORTLIB FIX

    References:
        http://stackoverflow.com/questions/18596410/importerror-no-module-named-mpl-toolkits-with-maptlotlib-1-3-0-and-py2exe
    """
    try:
        dpath_ = importlib.import_module('mpl_toolkits').__path__
        if isinstance(dpath_, (list, tuple)):
            for dpath in dpath_:
                fpath = join(dpath, '__init__.py')
                break
        else:
            dpath = dpath_
        if not ut.checkpath(dpath, verbose=True, info=True):
            ut.touch(fpath)

    except ImportError as ex:
        ut.printex(ex, 'pip install mpl_toolkits?')


def test_app():
    print('[installer] +--- TEST_APP ---')
    ut.cmd(ut.unixpath('dist/ibeis/IBEISApp.exe'))
    print('[installer] L___ FINISH TEST_APP ___')
    #ut.cmd(ut.unixpath('dist/ibeis/ibeis-win32-setup.exe'))


def main():
    print('[installer] +--- MAIN ---')
    BUILD_APP       = ut.get_argflag(('--build'))
    BUILD_INSTALLER = ut.get_argflag(('--inno', '--package', '--pkg'))
    TEST_APP        = ut.get_argflag(('--test'))
    CLEAN_BUILD     = ut.get_argflag(('--clean'))

    fix_importlib_hook()
    # default behavior is full build
    BUILD_ALL = ut.get_argflag('--all') or not (BUILD_APP or BUILD_INSTALLER or TEST_APP)

    # 1) SETUP: CLEAN UP
    if CLEAN_BUILD or BUILD_ALL:
        clean_pyinstaller()
    if BUILD_APP or BUILD_ALL:
        build_pyinstaller()
    if BUILD_INSTALLER or BUILD_ALL:
        package_installer()
    if TEST_APP or BUILD_ALL:
        test_app()
    print('[installer] L___ FINISH MAIN ___')


if __name__ == '__main__':
    main()

'''
dist\ibeis-win32-setup.exe
dist\ibeis\IBEISApp.exe
'''
