
env:
    global:
        - secure: "GLok0R+AMSFJrTeLI6FUuqEckz8UUVkOl8pvjzMsHdmTYdf8LeKkkKXgK49Elz18Z+NJLL6XNskdMBSdpZcA6j3ZiwSDbKFL8l2TAng4rVTHiJdQO1utE0UOuzEtD6QUrzmWmlF8QhnrCoINN5D+FgH+XusBKLYcJcNw8eL1S0TaPOq5GVberfgSlk0jSyDZ89iZo6Zd7Chva8eE0BYmmaEI6tRCBWTW90UNajMEPLRQer1kt5MapGWra/NYF5IY4s2r3Irc+xf/XKnoOgJZGVCa6kdyeC6CZ0qr+nLvZxUq1oKpWQy9GkE9J9nnQaTnvbLxuSK080ri4ftEYpL1ydP65bBJ9OXO0cCgmGtqO4YtlCDffyTa+rXaRM1FVTE8LTZhTmVURYSOaBUQTVE/BjExY+9hxrejv8Y89Vrrck2OWFbfsm0WOwf/DiCcSfIaCXqyPc0f8KI+s3oGg2KTIebzkoI+/Y5NGS5xCHIqZmrM0ByZcAaSqSUadxNWNcWHjZnyufggnOw+iNf8VfHuDiUgTOdKG8rI4sLLW6kI6o9D9RnncEe11hYFFoJP0q0DWf9mtgO1/5DB9GlYHotPorCnLXGviLQRywe6gvqOCF+6wafrkF/34H0+VEE/iZji1cJjrRNNa4VanyM/DIGRNYjictrZz7xhKkTLzflnZpg="

        - secure: "OvBsHdy4wgAlNL2oZUCy3sr7tuKG93AraZDxYzKimQ057AzcfxjuV6/+WK+Lg6hhDDzJvJAFA+Ik4ad1rTzzeia03U3MRQaSISCV0MM5r0DhIhftFg6K9+kr17aEo4Z2Np3/H+3d8ly5pX9HIDyiv8Bl58KcN9vL0gzKQFRk/MJSVc8AvCGm+U851Z1NBantYADeKaw3jKMWnkbBT7KiWur1z8hNyc7AB7rZvFnw1C2jE2YNoYXvMHqqyWjY/rmKjZ3OEv8vy4AjalRhOIxkiMnAyIaCOWJMa8Iies3TswJG1WJEtlBPaGia0jfoyE4Rqx2Lmvygzk62bTlxj/YiksWzsyitlNz9Bg8MGyDYKnldrreFRC2vQaBgkB8U9AczsQSQY62qfL9q0qKqrJr7N/pUbwb9ZXu1L20CuU4Jpgb1rBTqiqfEV+fIoxD5NCYAYgBhq2+NJZFyoVQdUOKoSxO8jqm30cJlyk9+gnYT7O4h+kRcnkCghT3ETeE6qlPEg2jbvEyJDAEUvP30sxvP1QHvM3aY5LnU6uMQW2xJH68x5hQ8bb1GwUDLwc+wGVo+9jcollovYfOiG1YY/j9rPUACD/YA/pXhadb6zr/RUEv7qVmWzDiZj3xzPKHzDVeSGIYbDohCAYnTKlzpH9J2/9wJwdyBRQJFo1t4Z7m6/fE="

        - secure: "bAxouq4hBibHHzmGYLl1Po/XpKAsaTmf5c8NNPXds9r4mr988OAc0KBlJiNNitGxAANCnDuwt5OV7nmrlmj4WUtk/K+F4wFwkxxYvyV8/KNw8S7FzvKb9VGG0IBzpQfex42ovJtBABQ+YcqleLGlc8JtyFIHdiCoMVUFWLZlHRHC67PH68j8Q4WUSGjRG+tWB8nP2Sk+Ji5TIqhDgfb/gLYzvYfi/xnZA6OfVqrklB9ZHTsPoiW+/Bwf8NInkKqsvpeefIINjljLCp23esuJ0grIi81BT1okwlKF6MAQNIqufUbhVNK3Yz3yWqjyDemZ0vASHEdWb2F10dHeacbo42llRrb2+N0//rpr4+719IWWHd58G2alH6/FniADWYAAAvf5ZTLC22wWGGm+pD2Kg4x5P8jRp1UXko0l9fBke9Hg21FrGHk5O62Vetzct7A/bFN+7O99Ykv+2Qs82Pnwp7oBorDbS4sdbCm+yBJqIOoGb2DU7NMbkicV0WX5xz5d3G8sCU4i7tc6Cph6Lo5HrioDeRmab5gXd7AQt8mfQJ1fXWfv6kjlNY6BjJyc7+UK8ZgRBiZlFmSpHG3bQ8MHuk21TIBziY0JLXmKdzVUAc482AXJVzsJwQooPMBvKI72gkdmZ+3/G2idGSQrUBKl/LnUTbeLif7owb8Frd2mX5k="


language: python
sudo: false

cache: 
    apt: true
    directories:
        - $HOME/.pip-cache
        - $HOME/gpg_install_prefix
        - $HOME/.cache/pip
        - $HOME/download

python:
  #- "2.7"
  - "3.5"
  - "3.6"
  - "3.7"
  #
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - | 
      MB_PYTHON_TAG="py2.py3-none-any"
      VERSION=$(python -c "import setup; print(setup.VERSION)") 
      echo "VERSION = $VERSION"
      echo "MB_PYTHON_TAG = $MB_PYTHON_TAG"
  - | 
      python setup.py bdist_wheel --universal 
  - |
      BDIST_WHEEL_PATH=$(ls dist/*-$VERSION-$MB_PYTHON_TAG*.whl)
      echo "BDIST_WHEEL_PATH = $BDIST_WHEEL_PATH"
  - pip install $BDIST_WHEEL_PATH
    
script: 
  - travis_wait ./run_doctests.sh

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - | 
        __heredoc__='''
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET

        # encrypt relevant travis variables
        travis encrypt TWINE_USERNAME=$TWINE_USERNAME 
        travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD  
        travis encrypt CI_GITHUB_SECRET=$CI_GITHUB_SECRET

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with travis secret
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc

        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # try and have travis cache this
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt

            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")

            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            set +x
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            # TODO: reliable and secure gpg keys
            # Relies on a specific environmenmt being available 
            git config --global user.signingkey D297D757
            git config --local user.signingkey D297D757
            # git config --global gpg.program
            MB_PYTHON_TAG=$MB_PYTHON_TAG GPG_KEYID=D297D757 CURRENT_BRANCH=$TRAVIS_BRANCH TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=yes ./publish.sh
            set -x
        else
            MB_PYTHON_TAG=$MB_PYTHON_TAG GPG_KEYID=D297D757 CURRENT_BRANCH=$TRAVIS_BRANCH TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=no ./publish.sh
        fi
