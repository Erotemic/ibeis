

# LONG DOCSTRS
#SQLDatabaseController.add_cleanly.__docstr__ = """
#uuid_list - a non-rowid column which identifies a row
#get_rowid_from_superkey - function which does what it says
#e.g:
#    get_rowid_from_superkey = ibs.get_image_gids_from_uuid
#    params_list = [(uuid.uuid4(),) for _ in range(7)]
#    superkey_paramx = [0]

#            params_list = [(uuid.uuid4(), 42) for _ in range(7)]
#            superkey_paramx = [0, 1]
#"""

#SQLDatabaseController.__init__.__docstr__ = """
#            SQLite3 Documentation: http://www.sqlite.org/docs.html
#            -------------------------------------------------------
#            SQL INSERT: http://www.w3schools.com/sql/sql_insert.asp
#            SQL UPDATE: http://www.w3schools.com/sql/sql_update.asp
#            SQL DELETE: http://www.w3schools.com/sql/sql_delete.asp
#            SQL SELECT: http://www.w3schools.com/sql/sql_select.asp
#            -------------------------------------------------------
#            Init the SQLite3 database connection and the execution object.
#            If the database does not exist, it will be automatically created
#            upon this object's instantiation.
#            """
#""" Same output as shell command below
#    > sqlite3 database.sqlite3 .dump > database.dump.txt

#    If file_=sys.stdout dumps to standard out

#    This saves the current database schema structure and data into a
#    text dump. The entire database can be recovered from this dump
#    file. The default will store a dump parallel to the current
#    database file.
#"""
#""" Commits staged changes to the database and saves the binary
#    representation of the database to disk.  All staged changes can be
#    commited one at a time or after a batch - which allows for batch
#    error handling without comprimising the integrity of the database.
#"""
#"""
#TODO: SEPARATE
#Input:
#    operation - an sql command to be executed e.g.
#        operation = '''
#        SELECT colname
#        FROM tblname
#        WHERE
#        (colname_1=?, ..., colname_N=?)
#        '''
#    params_iter - a sequence of params e.g.
#        params_iter = [(col1, ..., colN), ..., (col1, ..., colN),]
#Output:
#    results_iter - a sequence of data results
#"""
#"""
#operation - parameterized SQL operation string.
#    Parameterized prevents SQL injection attacks by using an ordered
#    representation ( ? ) or by using an ordered, text representation
#    name ( :value )

#params - list of values or a dictionary of representations and
#                corresponding values
#    * Ordered Representation -
#        List of values in the order the question marks appear in the
#        sql operation string
#    * Unordered Representation -
#        Dictionary of (text representation name -> value) in an
#        arbirtary order that will be filled into the cooresponging
#        slots of the sql operation string
#"""
#""" Creates a table in the database with some schema and constraints
#    schema_list - list of tablename columns tuples
#        {
#            (column_1_name, column_1_type),
#            (column_2_name, column_2_type),
#            ...
#            (column_N_name, column_N_type),
#        }
#    ---------------------------------------------
#    column_n_name - string name of column heading
#    column_n_type - NULL | INTEGER | REAL | TEXT | BLOB | NUMPY
#        The column type can be appended with ' PRIMARY KEY' to indicate
#        the unique id for the tablename.  It can also specify a default
#        value for the column with ' DEFAULT [VALUE]'.  It can also
#        specify ' NOT NULL' to indicate the column cannot be empty.
#    ---------------------------------------------
#    The tablename will only be created if it does not exist.  Therefore,
#    this can be done on every tablename without fear of deleting old data.
#    ---------------------------------------------
#    TODO: Add handling for column addition between software versions.
#    Column deletions will not be removed from the database schema.
#"""

