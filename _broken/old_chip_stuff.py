# flake8:noqa

@register_ibs_method
@getter_1to1
@accessor_decors.dev_cache_getter(const.ANNOTATION_TABLE, 'chip_rowid')
def get_annot_chip_rowids(ibs, aid_list, ensure=True, all_configs=False,
                          eager=True, nInput=None, qreq_=None):
    # TODO: DEPRICATE IN FAVOR OF AUTOGENERATED METHOD
    # get_annot_chip_rowids. THEN ALIAS THAT TO THIS
    # FIXME:
    if ensure:
        try:
            if ut.DEBUG2:
                assert ut.list_issubset(aid_list, ibs.get_valid_aids()), 'invalid aids'
            ibs.add_annot_chips(aid_list)
        except AssertionError as ex:
            ut.printex(ex, '[!ibs.get_annot_chip_rowids]')
            print('[!ibs.get_annot_chip_rowids] aid_list = %r' % (aid_list,))
            raise
    if all_configs:
        # FIXME: MAKE SQL-METHOD FOR NON-ROWID GETTERS
        cid_list = ibs.dbcache.get(const.CHIP_TABLE, ('chip_rowid',), aid_list,
                                   id_colname='annot_rowid', eager=eager,
                                   nInput=nInput)
    else:
        chip_config_rowid = ibs.get_chip_config_rowid()
        #print(chip_config_rowid)
        where_clause = 'annot_rowid=? AND config_rowid=?'
        params_iter = ((aid, chip_config_rowid) for aid in aid_list)
        cid_list = ibs.dbcache.get_where(const.CHIP_TABLE,  ('chip_rowid',),
                                         params_iter, where_clause,
                                         eager=eager, nInput=nInput)
    if ensure:
        try:
            cid_list = list(cid_list)
            ut.assert_all_not_None(cid_list, 'cid_list')
        except AssertionError as ex:
            valid_cids = ibs.get_valid_cids()  # NOQA
            ut.printex(ex, 'Ensured cids returned None!',
                          key_list=['aid_list', 'cid_list', 'valid_cids'])
            raise
    return cid_list



@register_ibs_method
@adder
def add_annot_chips(ibs, aid_list, qreq_=None):
    """
    FIXME: This is a dirty dirty function
    Adds chip data to the ANNOTATION. (does not create ANNOTATIONs. first use add_annots
    and then pass them here to ensure chips are computed) """
    # Ensure must be false, otherwise an infinite loop occurs
    from ibeis.model.preproc import preproc_chip
    cid_list = ibs.get_annot_chip_rowids(aid_list, ensure=False)
    dirty_aids = ut.get_dirty_items(aid_list, cid_list)
    if len(dirty_aids) > 0:
        if ut.VERBOSE:
            print('[ibs] adding chips')
        try:
            # FIXME: Cant be lazy until chip config / delete issue is fixed
            preproc_chip.compute_and_write_chips(ibs, aid_list)
            #preproc_chip.compute_and_write_chips_lazy(ibs, aid_list)
            params_iter = preproc_chip.add_annot_chips_params_gen(ibs, dirty_aids)
        except AssertionError as ex:
            ut.printex(ex, '[!ibs.add_annot_chips]')
            print('[!ibs.add_annot_chips] ' + ut.list_dbgstr('aid_list'))
            raise
        colnames = (ANNOT_ROWID, 'config_rowid', 'chip_uri', 'chip_width', 'chip_height',)
        get_rowid_from_superkey = functools.partial(ibs.get_annot_chip_rowids, ensure=False, qreq_=qreq_)
        cid_list = ibs.dbcache.add_cleanly(const.CHIP_TABLE, colnames, params_iter, get_rowid_from_superkey)

    return cid_list


@ut.indent_func
def add_annot_chips_params_gen(ibs, aid_list, qreq_=None):
    """Computes parameters for SQLController

    DEPRICATE

    computes chips if they do not exist.
    generates values for add_annot_chips sqlcommands

    Args:
        ibs (IBEISController):
        aid_list (list):
        qreq_ (QueryRequest):

    Example:
        >>> # DISABLE_DOCTEST
        >>> from ibeis.model.preproc.preproc_chip import *  # NOQA
        >>> from ibeis.model.preproc import preproc_chip
        >>> from os.path import basename
        >>> ibs, aid_list = preproc_chip.testdata_preproc_chip()
        >>> params_iter = add_annot_chips_params_gen(ibs, aid_list)
        >>> params_list = list(params_iter)
        >>> (aid, chip_config_rowid, cfpath, width, height,) = params_list[0]
        >>> fname = basename(cfpath)
        >>> result = (fname, width, height)
        >>> print(result)
        ('chip_aid=1_bbox=(0,0,1047,715)_theta=0.0_gid=1_CHIP(sz450).png', 545, 372)
    """
    try:
        # THIS DOESNT ACTUALLY COMPUTE ANYTHING!!!
        cfpath_list = make_annot_cfpath_list(ibs, aid_list)
        chip_config_rowid = ibs.get_chip_config_rowid(qreq_=qreq_)
        for cfpath, aid in zip(cfpath_list, aid_list):
            pil_chip = gtool.open_pil_image(cfpath)
            width, height = pil_chip.size
            if ut.DEBUG2:
                print('Yeild Chip Param: aid=%r, cpath=%r' % (aid, cfpath))
            yield (aid, chip_config_rowid, cfpath, width, height,)
    except IOError as ex:
        ut.printex(ex, 'ERROR IN PREPROC CHIPS')


@ut.indent_func
def delete_chips(ibs, cid_list, verbose=ut.VERBOSE):
    r"""
    Ignore::
        ----------------------
        Found 4 line(s) in 'code\\ibeis\\ibeis\\ibsfuncs.py':
        ibsfuncs.py :  426 |        ibs.delete_chips(invalid_cids, verbose=True)
        ibsfuncs.py :  681 |def delete_cache(ibs, delete_chips=False, delete_encounters=False):
        ibsfuncs.py :  689 |    if delete_chips:
        ibsfuncs.py :  743 |    ibs.delete_chips(all_cids)
        ----------------------
        Found 3 line(s) in 'code\\ibeis\\ibeis\\control\\manual_dependant_funcs.py':
        manual_dependant_funcs.py : 119 |    ibs.delete_chips(cid_list)
        manual_dependant_funcs.py : 131 |def delete_chips(ibs, cid_list, verbose=ut.VERBOSE, qreq_=None):
        manual_dependant_funcs.py : 137 |    #preproc_chip.delete_chips(ibs, cid_list, verbose=verbose)
        ----------------------
        Found 2 line(s) in 'code\\ibeis\\ibeis\\dev\\duct_tape.py':
        duct_tape.py :  52 |                         delete_chips_for_missing_annotations=False,
        duct_tape.py :  93 |    if delete_chips_for_missing_annotations:
        ----------------------
        Found 1 line(s) in 'code\\ibeis\\ibeis\\dev\\main_commands.py':
        main_commands.py :  89 |        ibs.delete_cache(delete_chips=True, delete_encounters=True)
        ----------------------
        Found 4 line(s) in 'code\\ibeis\\ibeis\\model\\preproc\\preproc_chip.py':
        preproc_chip.py : 122 |def delete_chips(ibs, cid_list, verbose=ut.VERBOSE):
        preproc_chip.py : 142 |        >>> delete_chips(ibs, cid_list, verbose=True)
        preproc_chip.py : 143 |        >>> ibs.delete_chips(cid_list)
        preproc_chip.py : 288 |        >>> ibs.delete_chips(cid_list2)
        ----------------------
        Found 1 line(s) in 'code\\ibeis\\ibeis\\tests\\test_delete_chips.py':
        test_delete_chips.py : 21 |    ibs.delete_chips(cid)

    DEPRICATE

    Removes chips from disk (does not remove from SQLController)
    this action must be performed by you.

    Args:
        ibs (IBEISController):
        cid_list (list):
        verbose (bool):

    Example:
        >>> from ibeis.model.preproc.preproc_chip import *  # NOQA
        >>> from ibeis.model.preproc import preproc_chip
        >>> ibs, aid_list = preproc_chip.testdata_preproc_chip()
        >>> compute_and_write_chips_lazy(ibs, aid_list)
        >>> cid_list = ibs.get_annot_chip_rowids(aid_list, ensure=True)
        >>> print(set(cid_list))
        >>> delete_chips(ibs, cid_list, verbose=True)
        >>> ibs.delete_chips(cid_list)
        >>> cid_list = ibs.get_annot_chip_rowids(aid_list, ensure=False)
    """
    on_delete(ibs, cid_list, qreq_=None, verbose=verbose, strict=False)

